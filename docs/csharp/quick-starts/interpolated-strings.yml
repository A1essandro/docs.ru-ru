### YamlMime:Tutorial
title: <span data-ttu-id="82712-101">Интерполяция строк в C#</span><span class="sxs-lookup"><span data-stu-id="82712-101">String interpolation in C#</span></span>
metadata:
  title: Краткие руководства по C#. Интерактивное руководство по интерполяции строк
  description: В этом руководстве вы воспользуетесь браузером для интерактивного ознакомления с функцией интерполяции строк в C#. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: <span data-ttu-id="82712-105">Коллекции в C#</span><span class="sxs-lookup"><span data-stu-id="82712-105">Collections in C#</span></span>
  ms.openlocfilehash: 03d46a90033d480046b63bdec3c4c83ab39c2f56
  ms.sourcegitcommit: 2e8acae16ae802f2d6d04e3ce0a6dbf04e476513
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 04/18/2018
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="82712-106">В этом кратком руководстве описывается, как с помощью [интерполяции строк](../language-reference/tokens/interpolated.md) вставить значения в одну строку.</span><span class="sxs-lookup"><span data-stu-id="82712-106">This quickstart teaches you how to use [string interpolation](../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="82712-107">Вы также научитесь управлять строковыми представлениями этих значений в результирующей строке.</span><span class="sxs-lookup"><span data-stu-id="82712-107">You also learn how to control text representations of those values in the result string.</span></span> <span data-ttu-id="82712-108">Вы напишете и выполните код C# в браузере и сразу же сможете просмотреть полученные результаты.</span><span class="sxs-lookup"><span data-stu-id="82712-108">You use your browser to write and run C# code and can immediately see the produced results.</span></span>
- title: <span data-ttu-id="82712-109">Создание интерполированной строки</span><span class="sxs-lookup"><span data-stu-id="82712-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"82712-110\">Запустите приведенный ниже код в интерактивном окне.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"82712-111\">Для этого введите следующий код в интерактивном окне (замените `\\<name>` своим именем) и нажмите кнопку **Выполнить**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-111\">To do that, type the code in the interactive window (replace `\\<name>` with your name) and select **Run**:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"82712-112\">При запуске кода в окне **Вывод** отображается строка, которая содержит ваше имя в приветствии.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-112\">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id=\"82712-113\">Строковым аргументом в вызове метода <xref:System.Console.WriteLine%2A> является *интерполированная строка*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-113\">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"82712-114\">Это похоже на шаблон, позволяющий создать одну строку (называемую *результирующей строкой*) из строки, содержащей внедренный код.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-114\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"82712-115\">Интерполированные строки особенно удобны при вставке значений в строку или сцеплении (объединении) нескольких строк.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-115\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span> \n\n<span data-ttu-id=\"82712-116\">Приведенный выше пример содержит два элемента, обязательные для каждой интерполированной строки:</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-116\">The example above contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"82712-117\">Строковый литерал, который начинается с символа `$`, стоящего до открывающей кавычки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-117\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"82712-118\">Между символом `$` и знаком кавычки не должно быть пробелов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-118\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"82712-119\">(Если вы хотите узнать, что будет при наличии пробела, вставьте его после символа `$` в интерактивном окне и выполните обновленный код.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-119\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id=\"82712-120\">Компилятор C# выдает сообщение \"Непредвиденный знак \"$\"\".)</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-120\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"82712-121\">Одно или несколько *интерполированных выражений*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-121\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"82712-122\">Интерполированное выражение обозначено открывающей и закрывающей фигурной скобкой (`{` и `}`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-122\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"82712-123\">Вы можете указать внутри фигурных скобок любое выражение C#, возвращающее значение (включая `null`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-123\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"82712-124\">Давайте рассмотрим еще несколько примеров интерполяции строк с другими типами данных.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-124\">Let's try a few more string interpolation examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"82712-125\">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-125\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"82712-126\">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-126\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="82712-127">Включение разных типов данных</span><span class="sxs-lookup"><span data-stu-id="82712-127">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"82712-128\">В предыдущем шаге вы использовали интерполяцию строк для вставки одной строки внутрь другой.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-128\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"82712-129\">Однако интерполированное выражение может относиться к любому типу данных.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-129\">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id=\"82712-130\">Давайте включим в интерполированную строку значения разных типов данных.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-130\">Let's include values of various data types in an interpolated string.</span></span> \n\n<span data-ttu-id=\"82712-131\">В следующем примере сначала определяется пользовательский тип данных `Vegetable`, который имеет [свойство](../properties.md) `Name` и метод `ToString`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-131\">In the following example, first, we define a custom data type `Vegetable` that has the `Name` [property](../properties.md) and the `ToString` method.</span></span> <span data-ttu-id=\"82712-132\">В клиентском коде этот метод может применяться для получения строкового представления экземпляра `Vegetable`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-132\">The client code can use that method to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id=\"82712-133\">В примере метод `Vegetable.ToString` возвращает значение свойства `Name`, которое инициализируется в конструкторе `Vegetable`: `Vegetable(string name) => Name = name;`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-133\">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` constructor: `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id=\"82712-134\">Затем создается экземпляр типа `Vegetable` путем использования ключевого слова `new` и указания параметра имени для конструктора `Vegetable`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-134\">Then we create an instance of the `Vegetable` type by using `new` keyword and providing a name parameter for the constructor `Vegetable`.</span></span> <span data-ttu-id=\"82712-135\">Наконец, этот экземпляр включается в интерполированную строку, которая также содержит значение <xref:System.DateTime>, значение <xref:System.Decimal> и значение [перечисления](../programming-guide/enumeration-types.md) `Unit`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-135\">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id=\"82712-136\">Запустите приведенный ниже код в интерактивном окне.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-136\">Run the following code in the interactive window:</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, pound, ounce, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\n<span data-ttu-id=\"82712-137\">Обратите внимание на то, что интерполированное выражение `item` в интерполированной строке разрешается в текст \"eggplant\" в результирующей строке.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-137\">Note that the interpolated expression `item` in the interpolated string resolves to the text \"eggplant\" in the result string.</span></span> <span data-ttu-id=\"82712-138\">Связано это с тем, что если результат выражения не имеет строковый тип, он разрешается в строку описанным ниже образом.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-138\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"82712-139\">Если результатом вычисления интерполированного выражения является `null`, используется пустая строка (\"\" или <xref:System.String.Empty?displayProperty=nameWithType>).</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-139\">If the interpolated expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"82712-140\">Если результатом вычисления интерполированного выражения не является `null`, обычно вызывается метод `ToString` результирующего типа.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-140\">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id=\"82712-141\">Чтобы проверить это, можно изменить реализацию метода `Vegetable.ToString`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-141\">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id=\"82712-142\">Метод `ToString` можно не реализовывать, так как каждый тип данных C# имеет его реализацию в той или иной форме.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-142\">You might even not implement `ToString` method since every C# data type has some implementation of this method.</span></span> <span data-ttu-id=\"82712-143\">Это можно проверить, закомментировав определение метода `Vegetable.ToString` в примере, для чего перед ним нужно поставить символ комментария (`//`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-143\">To test that, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol `//` in front of it).</span></span> <span data-ttu-id=\"82712-144\">В выходных данных строка \"eggplant\" заменяется полным именем типа (пространство имен, определенное REPL, вместе с именем типа), что является стандартным поведением метода <xref:System.Object.ToString?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-144\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"82712-145\">Для типа перечисления метод `ToString` по умолчанию возвращает строковое представление значения, используемого в определении перечисления.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-145\">Default behavior of the `ToString` method for an enumeration type is to return the string representation of a value used at the definition of the enumeration.</span></span>   \n\n<span data-ttu-id=\"82712-146\">В выходных данных этого примера дата является слишком точной (цена на баклажаны не меняется каждую секунду), а в значении цены не указана единица валюты.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-146\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"82712-147\">В следующем шаге вы узнаете, как устранить эти проблемы, управляя форматом строковых представлений результатов выражений.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-147\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"82712-148\">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-148\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"82712-149\">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-149\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="82712-150">Управление форматированием интерполированных выражений</span><span class="sxs-lookup"><span data-stu-id="82712-150">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="82712-151">В предыдущем шаге мы вставили две неправильно отформатированные строки в результирующую строку.</span><span class="sxs-lookup"><span data-stu-id="82712-151">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="82712-152">Первая была значением даты и времени, при этом допустимой была только дата.</span><span class="sxs-lookup"><span data-stu-id="82712-152">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="82712-153">Вторая была ценой, в которой отсутствовала единица валюты.</span><span class="sxs-lookup"><span data-stu-id="82712-153">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="82712-154">Обе эти проблемы легко решить.</span><span class="sxs-lookup"><span data-stu-id="82712-154">Both issues are easy to address.</span></span> <span data-ttu-id="82712-155">Интерполяция строк позволяет указывать *строки формата*, управляющие форматированием определенных типов.</span><span class="sxs-lookup"><span data-stu-id="82712-155">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="82712-156">Измените вызов `Console.WriteLine` из предыдущего примера, включив в него строки формата для выражений даты и цены, как показано в следующей строке:</span><span class="sxs-lookup"><span data-stu-id="82712-156">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="82712-157">Задайте строку формата, указав ее после интерполированного выражения через точку с запятой.</span><span class="sxs-lookup"><span data-stu-id="82712-157">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="82712-158">"d" — это [стандартная строка формата для даты и времени](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier), представляющая краткий формат.</span><span class="sxs-lookup"><span data-stu-id="82712-158">"d" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="82712-159">"C2" — это [стандартная строка числового формата](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier), представляющая число в виде денежной единицы с точностью два знака после запятой.</span><span class="sxs-lookup"><span data-stu-id="82712-159">"C2" is a [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="82712-160">Некоторые типы в библиотеках .NET поддерживают предопределенный набор строк формата.</span><span class="sxs-lookup"><span data-stu-id="82712-160">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="82712-161">К ним относятся все числовые типы, а также типы даты и времени.</span><span class="sxs-lookup"><span data-stu-id="82712-161">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="82712-162">Полный список типов, поддерживающих строки формата, см. в разделе [Строки формата и типы библиотек классов .NET](../../standard/base-types/formatting-types.md#stringRef) статьи [Типы форматирования в .NET](../../standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="82712-162">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="82712-163">Попробуйте изменить строки формата в примере, чтобы узнать, как они влияют на форматирование даты и времени, а также числового значения.</span><span class="sxs-lookup"><span data-stu-id="82712-163">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="82712-164">Измените "d" в `{date:d}` на "t" (чтобы отобразить краткий формат времени), "y" (чтобы отобразить год и месяц) и "yyyy" (чтобы отобразить год в виде четырехзначного числа).</span><span class="sxs-lookup"><span data-stu-id="82712-164">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="82712-165">Измените "C2" в `{price:C2}` на "e" (для экспоненциального представления) и "F3" (чтобы получить числовое значение с тремя знаками после запятой).</span><span class="sxs-lookup"><span data-stu-id="82712-165">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="82712-166">Кроме форматирования, вы можете управлять шириной поля и выравниванием для форматированных строк, включаемых в результирующую строку.</span><span class="sxs-lookup"><span data-stu-id="82712-166">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="82712-167">В следующем шаге вы научитесь это делать.</span><span class="sxs-lookup"><span data-stu-id="82712-167">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="82712-168">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="82712-168">This online coding experience is in preview mode.</span></span> <span data-ttu-id="82712-169">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="82712-169">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="82712-170">Управление шириной поля и выравниванием для интерполированных выражений</span><span class="sxs-lookup"><span data-stu-id="82712-170">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="82712-171">Как правило, когда результат интерполированного выражения форматируется как строка, эта строка включается в результирующую без начальных или конечных пробелов.</span><span class="sxs-lookup"><span data-stu-id="82712-171">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="82712-172">Особенно когда вы работаете с набором данных, возможность управления шириной поля и выравниванием помогает получить более понятные выходные данные.</span><span class="sxs-lookup"><span data-stu-id="82712-172">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="82712-173">Это можно продемонстрировать на приведенном ниже примере кода.</span><span class="sxs-lookup"><span data-stu-id="82712-173">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="82712-174">Имена элементов выровнены по левому краю, а их количества — по правому.</span><span class="sxs-lookup"><span data-stu-id="82712-174">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="82712-175">Вы можете указать выравнивание, добавив запятую (",") после интерполированного выражения и назначив *минимальную* ширину поля.</span><span class="sxs-lookup"><span data-stu-id="82712-175">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="82712-176">Если указанное значение является положительным числом, то поле выравнивается по правому краю.</span><span class="sxs-lookup"><span data-stu-id="82712-176">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="82712-177">Если оно является отрицательным числом, то поле выравнивается по левому краю.</span><span class="sxs-lookup"><span data-stu-id="82712-177">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="82712-178">Попробуйте удалить знаки "минус" из кода `{"Item",-25}` и `{item.Key,-25}`, а затем снова выполните пример.</span><span class="sxs-lookup"><span data-stu-id="82712-178">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="82712-179">На этот раз имена элементов выровнены по правому краю.</span><span class="sxs-lookup"><span data-stu-id="82712-179">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="82712-180">Вы можете совмещать описатель выравнивания и строку формата в одном интерполированном выражении.</span><span class="sxs-lookup"><span data-stu-id="82712-180">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="82712-181">Для этого сначала укажите выравнивание, а затем через двоеточие строку формата.</span><span class="sxs-lookup"><span data-stu-id="82712-181">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="82712-182">Попробуйте выполнить приведенный ниже код, который выводит три отформатированные строки с заданной шириной поля.</span><span class="sxs-lookup"><span data-stu-id="82712-182">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="82712-183">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="82712-183">This online coding experience is in preview mode.</span></span> <span data-ttu-id="82712-184">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="82712-184">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: "<span data-ttu-id=\"82712-185\">Вы закончили работу с кратким руководством по интерполяции строк.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-185\">You've completed the string interpolation quickstart.</span></span> \n\n<span data-ttu-id=\"82712-186\">Вы можете продолжить работу с другими краткими руководствами в своей локальной среде разработки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-186\">You can continue these quickstarts in your own local development environment.</span></span> <span data-ttu-id=\"82712-187\">Вы можете ознакомиться с основами [локальной разработки](local-environment.md), а затем выбрать краткое руководство.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-187\">Learn the basics of [local development](local-environment.md) and then pick a quickstart.</span></span> <span data-ttu-id=\"82712-188\">Вы можете попробовать еще раз выполнить это краткое руководство, сразу перейти к следующему руководству или вернуться к предыдущему руководству по [числам в C#](numbers-in-csharp-local.md).</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-188\">You can try this same quickstart, move directly to the next quickstart, or start again with the [Numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"82712-189\">Дополнительные сведения об интерполяции строк см. в разделе [Интерполяция строк](../language-reference/tokens/interpolated.md) справочника по C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"82712-189\">Learn more about string interpolation in the [String interpolation](../language-reference/tokens/interpolated.md) topic in the C# Reference.</span></span>"
