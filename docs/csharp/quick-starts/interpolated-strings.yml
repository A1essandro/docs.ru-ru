### YamlMime:Tutorial
title: <span data-ttu-id="0ec07-101">Интерполированные строки в C#</span><span class="sxs-lookup"><span data-stu-id="0ec07-101">Interpolated strings in C#</span></span>
metadata:
  title: Краткие руководства по C#. Интерактивное руководство по интерполированным строкам
  description: В этом руководстве вы воспользуетесь браузером для интерактивного применения функции интерполированных строк в C#. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: <span data-ttu-id="0ec07-105">Использование коллекций с применением C#</span><span class="sxs-lookup"><span data-stu-id="0ec07-105">Collections in C#</span></span>
  ms.openlocfilehash: 7e1de34c9075826a6fcb6bf71cb01bfbd5c215ca
  ms.sourcegitcommit: 935d5267c44f9bce801468ef95f44572f1417e8c
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 03/28/2018
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="0ec07-106">Это краткое руководство описывает, как с помощью интерполированных строк в C# вставить значения в одну строку вывода в интерактивном режиме.</span><span class="sxs-lookup"><span data-stu-id="0ec07-106">This quickstart teaches you how to use interpolated strings in C# to insert values into a single ouput string interactively.</span></span> <span data-ttu-id="0ec07-107">Вы напишете код C# и сразу же сможете просмотреть результаты его компиляции и выполнения в браузере.</span><span class="sxs-lookup"><span data-stu-id="0ec07-107">You use your browser to write C# code and can immediately see the results of compiling and running your code.</span></span> <span data-ttu-id="0ec07-108">Это краткое руководство содержит ряд занятий по сцеплению строк, вставке значений в строки и разнообразному форматированию этих значений.</span><span class="sxs-lookup"><span data-stu-id="0ec07-108">The quickstart contains a series of lessons that concatenate strings, insert values into strings, and format those values in different ways.</span></span>
- title: <span data-ttu-id="0ec07-109">Создание интерполированной строки</span><span class="sxs-lookup"><span data-stu-id="0ec07-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"0ec07-110\">Запустите приведенный ниже код в интерактивном окне.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"0ec07-111\">Для этого введите следующий блок кода в интерактивном окне (замените \"\\<name>\" своим именем) и нажмите кнопку **Выполнить**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-111\">To do that, type the following code block in the interactive window (replace \"\\<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"0ec07-112\">При запуске программы отображается одна строка, которая содержит ваше имя в приветствии.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-112\">When you run the program, it displays a single string that includes your name in the greeting.</span></span> <span data-ttu-id=\"0ec07-113\">Строка, включенная в вызов метода <xref:System.Console.WriteLine%2A>, является *интерполированной*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-113\">The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"0ec07-114\">Это похоже на шаблон, позволяющий создать одну строку (называемую *результирующей строкой*) из строки, содержащей внедренный код.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-114\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"0ec07-115\">Интерполированные строки особенно удобны при вставке значений в строку или сцеплении (объединении) строк.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-115\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.</span></span> \n\n<span data-ttu-id=\"0ec07-116\">Этот простой пример содержит два элемента, обязательные для каждой интерполированной строки:</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-116\">This simple example contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"0ec07-117\">Строковый литерал, который начинается с символа `$`, стоящего до открывающей кавычки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-117\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"0ec07-118\">Между символом `$` и знаком кавычки не должно быть пробелов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-118\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"0ec07-119\">(Если вы хотите узнать, что при этом будет, вставьте пробел после символа `$` в интерактивном окне и нажмите кнопку **Запуск**.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-119\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and click the **Run** button.</span></span> <span data-ttu-id=\"0ec07-120\">Компилятор C# выдает сообщение \"Непредвиденный знак \"$\"\".)</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-120\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"0ec07-121\">Одно или несколько *интерполированных выражений*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-121\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"0ec07-122\">Интерполированное выражение обозначено открывающей и закрывающей фигурной скобкой (`{` и `}`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-122\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"0ec07-123\">Вы можете указать внутри фигурных скобок любое выражение C#, возвращающее значение (включая `null`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-123\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"0ec07-124\">Давайте рассмотрим еще несколько примеров интерполированных строк с другими типами данных.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-124\">Let's try a few more interpolated string examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"0ec07-125\">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-125\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"0ec07-126\">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-126\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="0ec07-127">Включение разных типов данных</span><span class="sxs-lookup"><span data-stu-id="0ec07-127">Include different data types</span></span>
  durationInMinutes: 3
  content: "<span data-ttu-id=\"0ec07-128\">В предыдущем кратком руководстве вы использовали интерполированную строку для вставки одной строки внутрь другой.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-128\">In the previous quickstart, you used an interpolated string to insert one string inside of another.</span></span> <span data-ttu-id=\"0ec07-129\">Однако выражение интерполированной строки может относиться к любому типу данных.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-129\">An interpolated string expression can be any data type, though.</span></span> <span data-ttu-id=\"0ec07-130\">Давайте рассмотрим интерполированную строку со значениями нескольких типов данных.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-130\">Let's try an interpolated string that has values of multiple data types.</span></span> \n\n<span data-ttu-id=\"0ec07-131\">Приведенный ниже пример включает интерполированные выражения с объектом `Vegetable`, членом перечисления `Unit`, значением <xref:System.DateTime> и значением <xref:System.Decimal>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-131\">The following example includes interpolated expressions with a `Vegetable` object, a member of the `Unit` enumeration, a <xref:System.DateTime> value, and a <xref:System.Decimal> value.</span></span> <span data-ttu-id=\"0ec07-132\">Запустите его в интерактивном окне.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-132\">Run it in the interactive window.</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\n<span data-ttu-id=\"0ec07-133\">Обратите внимание, что одно из интерполированных выражений включает объект `item` в результирующую строку, которая выводится на консоль. В данном случае в результирующую строку вставляется строка \"eggplant\" (баклажан).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-133\">Note that one of the interpolated expressions includes the `item` object in the result string that's displayed to the console, and in this case the string \"eggplant\" is inserted into the result string.</span></span> <span data-ttu-id=\"0ec07-134\">Это вызвано тем, что если тип интерполированного выражения отличается от строки, компилятор C# делает следующее:</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-134\">That's because, when the type of an interpolated expression is not a string, the C# compiler does the following:</span></span>\n\n- <span data-ttu-id=\"0ec07-135\">Если интерполированное выражение равно `null`, оно возвращает пустую строку (\"\" или <xref:System.String.Empty?displayProperty=nameWithType>).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-135\">If the interpolated expression is `null`, the interpolated expression returns an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>).</span></span>\n\n- <span data-ttu-id=\"0ec07-136\">Если интерполированное выражение не равно `null`, вызывается метод `ToString` для типа интерполированного выражения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-136\">If the interpolated expression is not `null`, the `ToString` method of the type of the interpolated expression is called.</span></span> <span data-ttu-id=\"0ec07-137\">Это можно проверить, закомментировав определение метода `Vegetable.ToString` в этом примере, для чего перед ним нужно поставить символ комментария (`//`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-137\">You can test this by commenting out the definition of the `Vegetable.ToString` method in the example by putting a comment symbol (`//`) in front of it.</span></span> <span data-ttu-id=\"0ec07-138\">В выходных данных строка \"eggplant\" заменяется полным именем типа (пространство имен, определенное REPL, вместе с именем типа), что является стандартным поведением метода <xref:System.Object.ToString?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-138\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span>   \n\n<span data-ttu-id=\"0ec07-139\">В выходных данных этого примера дата является слишком точной (цена на баклажаны не меняется каждую секунду), а в значении цены не указана единица измерения валюты.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-139\">In the output from this example, the date is too precise (the price of eggplant does not vary by the second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"0ec07-140\">В следующем шаге вы узнаете, как устранить эти проблемы, управляя форматом строк, возвращаемых интерполированными выражениями.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-140\">In the next step, you'll learn how to fix those issues by controlling the format of strings returned by interpolated expressions.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"0ec07-141\">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-141\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"0ec07-142\">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-142\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="0ec07-143">Управление форматированием интерполированных выражений</span><span class="sxs-lookup"><span data-stu-id="0ec07-143">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="0ec07-144">На предыдущем занятии мы вставили две неправильно отформатированные строки в результирующую строку.</span><span class="sxs-lookup"><span data-stu-id="0ec07-144">In the previous lesson, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="0ec07-145">Первая была значением даты и времени, при этом допустимой была только дата.</span><span class="sxs-lookup"><span data-stu-id="0ec07-145">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="0ec07-146">Вторая была ценой, в которой отсутствовала единица измерения валюты.</span><span class="sxs-lookup"><span data-stu-id="0ec07-146">The second was a price that did not indicate its unit of currency.</span></span> <span data-ttu-id="0ec07-147">Обе эти проблемы легко решить.</span><span class="sxs-lookup"><span data-stu-id="0ec07-147">Both issues are easy to address.</span></span> <span data-ttu-id="0ec07-148">Интерполированные выражения могут включать *строки формата*, управляющие форматированием определенных типов.</span><span class="sxs-lookup"><span data-stu-id="0ec07-148">Interpolated expressions can include *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="0ec07-149">Измените вызов `Console.WriteLine` из предыдущего примера, включив в него описатель формата для полей даты и цены, как показано в следующей строке:</span><span class="sxs-lookup"><span data-stu-id="0ec07-149">Modify the call to `Console.WriteLine` from the previous example to include the format specifier for the date and price fields as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="0ec07-150">Задайте строку формата, указав ее после интерполированного выражения через точку с запятой.</span><span class="sxs-lookup"><span data-stu-id="0ec07-150">You specify a format string by following the interpolated expression with a colon and the format string.</span></span> <span data-ttu-id="0ec07-151">"d" — это [стандартная строка формата для даты и времени](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier), представляющая краткий формат.</span><span class="sxs-lookup"><span data-stu-id="0ec07-151">"d" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="0ec07-152">"C2" — это [стандартная строка числового формата](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier), представляющая число в виде денежной единицы с точностью два знака после запятой.</span><span class="sxs-lookup"><span data-stu-id="0ec07-152">"C2" is a  [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="0ec07-153">Некоторые типы в библиотеках .NET Standard поддерживают предопределенный набор строк формата.</span><span class="sxs-lookup"><span data-stu-id="0ec07-153">A number of types in the .NET Standard libraries support a predefined set of format strings.</span></span> <span data-ttu-id="0ec07-154">К ним относятся все числовые типы, а также типы даты и времени.</span><span class="sxs-lookup"><span data-stu-id="0ec07-154">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="0ec07-155">Полный список типов, поддерживающих строки формата, см. в разделе [Строки формата и типы библиотек классов .NET](../../standard/base-types/formatting-types.md#stringRef) статьи [Типы форматирования в .NET](../../standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="0ec07-155">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span> <span data-ttu-id="0ec07-156">Любой тип может поддерживать набор строк формата, кроме того, можно разрабатывать расширения пользовательского форматирования для существующих типов.</span><span class="sxs-lookup"><span data-stu-id="0ec07-156">Any type can support a set of format strings, and you can also develop custom formatting extensions that provide custom formatting for existing types.</span></span> <span data-ttu-id="0ec07-157">Сведения о пользовательском форматировании n посредством реализации <xref:System.ICustomFormatter> см. в разделе [Настраиваемое форматирование с использованием интерфейса ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) статьи [Типы форматирования в .NET](../../standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="0ec07-157">For information on custom formatting by providing an <xref:System.ICustomFormatter> implementation, see [Custom Formatting with ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="0ec07-158">Попробуйте изменить строки формата в **редакторе .NET**, чтобы узнать, как они влияют на форматирование даты и времени, а также числового значения.</span><span class="sxs-lookup"><span data-stu-id="0ec07-158">Try modifying the format strings in the **.NET Editor** to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="0ec07-159">Измените "d" в `{date:d}` на "t" (чтобы отобразить краткий формат времени), "y" (чтобы отобразить год и месяц) и "yyyy" (чтобы отобразить год в виде четырехзначного числа).</span><span class="sxs-lookup"><span data-stu-id="0ec07-159">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="0ec07-160">Измените "C2" в `{price:C2}` на "e" (для экспоненциального представления) и "F3" (чтобы получить числовое значение с тремя знаками после запятой).</span><span class="sxs-lookup"><span data-stu-id="0ec07-160">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="0ec07-161">Кроме форматирования, вы можете управлять шириной поля и выравниванием для строк, возвращаемых интерполированным выражением.</span><span class="sxs-lookup"><span data-stu-id="0ec07-161">In addition to controlling formatting, you can also control the field width and alignment of the strings returned by an interpolated expression.</span></span> <span data-ttu-id="0ec07-162">В следующем шаге вы научитесь это делать.</span><span class="sxs-lookup"><span data-stu-id="0ec07-162">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="0ec07-163">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="0ec07-163">This online coding experience is in preview mode.</span></span> <span data-ttu-id="0ec07-164">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="0ec07-164">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="0ec07-165">Управление шириной поля и выравниванием для интерполированных выражений</span><span class="sxs-lookup"><span data-stu-id="0ec07-165">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: "<span data-ttu-id=\"0ec07-166\">Как правило, когда строка, возвращаемая интерполированным выражением, включается в результирующую строку, в ней нет начальных или конечных пробелов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-166\">Ordinarily, when the string returned by an interpolated expression is included in a result string, it has no leading or trailing spaces.</span></span> <span data-ttu-id=\"0ec07-167\">Специально для экземпляров, в которых вы работаете с набором данных, интерполированные выражения позволяют задать ширину поля и его выравнивание.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-167\">Particularly for instances in which you are working with a set of data, interpolated expressions let you specify a field width and its alignment.</span></span> <span data-ttu-id=\"0ec07-168\">Это можно продемонстрировать на приведенном ниже примере кода.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-168\">To see this, run the following code.</span></span>\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\n<span data-ttu-id=\"0ec07-169\">Имена элементов выровнены по левому краю, а их количества — по правому.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-169\">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id=\"0ec07-170\">Вы можете указать выравнивание, добавив запятую (\",\") после выражения и назначив ширину поля.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-170\">You specify the alignment by adding a comma (\",\") after the expression and designating the field width.</span></span> <span data-ttu-id=\"0ec07-171\">Если ширина поля является положительным числом, то поле выравнивается по правому краю:</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-171\">If the field width is a positive number, the field is right-aligned:</span></span>\n\n```text\n{expression, width}\n```\n\n<span data-ttu-id=\"0ec07-172\">Если ширина поля является отрицательным числом, то поле выравнивается по левому краю:</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-172\">If the field width is a negative number, the field is left-aligned:</span></span>\n\n```text\n{expression, -width}\n```\n<span data-ttu-id=\"0ec07-173\">Попробуйте удалить знаки \"минус\" из интерполированных выражений `{\"Item\",-25}` и `{item.Key,-25}`, а затем снова запустите пример.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-173\">Try removing the negative signs from the `{\"Item\",-25}` and `{item.Key,-25}` interpolated expressions and run the example again.</span></span> <span data-ttu-id=\"0ec07-174\">На этот раз имя элемента выровнено по правому краю.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-174\">This time, the item name is right-aligned.</span></span>\n\n<span data-ttu-id=\"0ec07-175\">Вы можете совмещать ширину поля и строку формата в одном интерполированном выражении.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-175\">You can combine a field width and a format string in a single interpolated expression.</span></span> <span data-ttu-id=\"0ec07-176\">Сначала идет ширина поля, за которой следует двоеточие, а затем — строка формата.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-176\">The field width comes first, followed by a colon and the format string.</span></span> <span data-ttu-id=\"0ec07-177\">Ознакомьтесь с приведенной ниже простой программой, которая отображает три отформатированные строки с заданной шириной поля.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-177\">Try the following simple program that displays three formatted strings with defined field widths.</span></span>\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"0ec07-178\">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-178\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"0ec07-179\">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-179\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"0ec07-180\">Итак, вы закончили работу с кратким руководством по интерполированным строкам.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-180\">You've completed the interpolated strings quickstart.</span></span> \n\n<span data-ttu-id=\"0ec07-181\">Вы можете продолжить работу с другими краткими руководствами в своей среде локальной разработки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-181\">You can continue these quickstarts on your own local development environment.</span></span> <span data-ttu-id=\"0ec07-182\">Вы можете ознакомиться с основами [локальной разработки](local-environment.md), а затем выбрать краткое руководство.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-182\">Learn the basics of [local development](local-environment.md) and then pick a quickstart.</span></span> <span data-ttu-id=\"0ec07-183\">Вы можете попробовать выполнить это упражнение, сразу перейти к следующему краткому руководству или вернуться к предыдущему руководству по [числам в C#](numbers-in-csharp-local.md).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-183\">You can try this same exercise, move directly to the next quickstart, or start again with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"0ec07-184\">Дополнительные сведения об интерполированных строках см. в разделе [Интерполяция строк](../language-reference/tokens/interpolated.md) справочника по C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0ec07-184\">You can learn more about interpolated strings in the [String interpolation](../language-reference/tokens/interpolated.md) topic in the C# Reference.</span></span>"
