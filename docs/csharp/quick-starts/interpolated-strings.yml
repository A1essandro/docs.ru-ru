### YamlMime:Tutorial
title: "Интерполированные строки в C#"
metadata:
  title: "Интерполированные строки в C#. Сведения о создании строки, содержащей другие значения, такие как даты или числа."
  description: "В этом руководстве вы воспользуетесь браузером для интерактивного применения функции интерполированных строк в C#. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере."
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "Использование коллекций с применением C#"
  ms.openlocfilehash: f54d8e5e3703556b333155fd9541f9d7c7e7fd1b
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 2
  content: "Это краткое руководство описывает, как использовать интерполированные строки в C#, чтобы вставить значения в одну строку вывода в интерактивном режиме. Вы напишете код C# и сразу же сможете просмотреть результаты его компиляции и выполнения в браузере. Это краткое руководство содержит ряд занятий по сцеплению строк, вставке значений в строки и разнообразному форматированию этих значений.\n"
- title: "Создание интерполированной строки"
  durationInMinutes: 2
  content: "Запустите приведенный ниже код в интерактивном окне. Для этого введите следующий блок кода в интерактивном окне (замените \"\\<name>\" своим именем) и нажмите кнопку **Выполнить**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nПри запуске программы отображается одна строка, которая содержит ваше имя в приветствии. Строка, включенная в вызов метода <xref:System.Console.WriteLine%2A>, является *интерполированной*. Это похоже на шаблон, позволяющий создать одну строку (называемую *результирующей строкой*) из строки, содержащей внедренный код. Интерполированные строки особенно удобны при вставке значений в строку или сцеплении (объединении) строк. \n\nЭтот простой пример содержит два элемента, обязательные для каждой интерполированной строки: \n\n- Строковый литерал, который начинается с символа `$`, стоящего до открывающей кавычки. Между символом `$` и знаком кавычки не должно быть пробелов. (Если вы хотите узнать, что при этом будет, вставьте пробел после символа `$` в интерактивном окне и нажмите кнопку **Запуск**. Компилятор C# выдает сообщение \"Непредвиденный знак \"$\"\".) \n\n- Одно или несколько *интерполированных выражений*. Интерполированное выражение обозначено открывающей и закрывающей фигурной скобкой (`{` и `}`). Вы можете указать внутри фигурных скобок любое выражение C#, возвращающее значение (включая `null`). \n\nДавайте рассмотрим еще несколько примеров интерполированных строк с другими типами данных.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Включение разных типов данных"
  durationInMinutes: 3
  content: "В предыдущем кратком руководстве вы использовали интерполированную строку для вставки одной строки внутрь другой. Однако выражение интерполированной строки может относиться к любому типу данных. Давайте рассмотрим интерполированную строку со значениями нескольких типов данных. \n\nПриведенный ниже пример включает интерполированные выражения с объектом `Vegetable`, членом перечисления `Unit`, значением <xref:System.DateTime> и значением <xref:System.Decimal>. Запустите его в интерактивном окне.\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nОбратите внимание, что одно из интерполированных выражений включает объект `item` в результирующую строку, которая выводится на консоль. В данном случае в результирующую строку вставляется строка \"eggplant\" (баклажан). Это вызвано тем, что если тип интерполированного выражения отличается от строки, компилятор C# делает следующее:\n\n- Если интерполированное выражение равно `null`, оно возвращает пустую строку (\"\" или <xref:System.String.Empty?displayProperty=nameWithType>).\n\n- Если интерполированное выражение не равно `null`, вызывается метод `ToString` для типа интерполированного выражения. Это можно проверить, закомментировав определение метода `Vegetable.ToString` в этом примере, для чего перед ним нужно поставить символ комментария (`//`). В выходных данных строка \"eggplant\" заменяется полным именем типа (пространство имен, определенное REPL, вместе с именем типа), что является стандартным поведением метода <xref:System.Object.ToString?displayProperty=nameWithType>.   \n\nВ выходных данных этого примера дата является слишком точной (цена на баклажаны не меняется каждую секунду), а в значении цены не указана единица измерения валюты. В следующем шаге вы узнаете, как устранить эти проблемы, управляя форматом строк, возвращаемых интерполированными выражениями.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Управление форматированием интерполированных выражений"
  durationInMinutes: 5
  content: "На предыдущем занятии мы вставили две неправильно отформатированные строки в результирующую строку. Первая была значением даты и времени, при этом допустимой была только дата. Вторая была ценой, в которой отсутствовала единица измерения валюты. Обе эти проблемы легко решить. Интерполированные выражения могут включать *строки формата*, управляющие форматированием определенных типов. Измените вызов `Console.WriteLine` из предыдущего примера, включив в него описатель формата для полей даты и цены, как показано в следующей строке:\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\nЗадайте строку формата, указав ее после интерполированного выражения через точку с запятой. \"d\" — это [стандартная строка формата для даты и времени](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier), представляющая краткий формат. \"C2\" — это [стандартная строка числового формата](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier), представляющая число в виде денежной единицы с точностью два знака после запятой.\n\nНекоторые типы в библиотеках .NET Standard поддерживают предопределенный набор строк формата. К ним относятся все числовые типы, а также типы даты и времени. Полный список типов, поддерживающих строки формата, см. в разделе [Строки формата и типы библиотек классов .NET](../../standard/base-types/formatting-types.md#stringRef) статьи [Типы форматирования в .NET](../../standard/base-types/formatting-types.md). Любой тип может поддерживать набор строк формата, кроме того, можно разрабатывать расширения пользовательского форматирования для существующих типов. Сведения о пользовательском форматировании n посредством реализации <xref:System.ICustomFormatter> см. в разделе [Настраиваемое форматирование с использованием интерфейса ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) статьи [Типы форматирования в .NET](../../standard/base-types/formatting-types.md).\n\nПопробуйте изменить строки формата в **редакторе .NET**, чтобы узнать, как они влияют на форматирование даты и времени, а также числового значения. Измените \"d\" в `{date:d}` на \"t\" (чтобы отобразить краткий формат времени), \"y\" (чтобы отобразить год и месяц) и \"yyyy\" (чтобы отобразить год в виде четырехзначного числа). Измените \"C2\" в `{price:C2}` на \"e\" (для экспоненциального представления) и \"F3\" (чтобы получить числовое значение с тремя знаками после запятой).\n\nКроме форматирования, вы можете управлять шириной поля и выравниванием для строк, возвращаемых интерполированным выражением. В следующем шаге вы научитесь это делать.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Управление шириной поля и выравниванием для интерполированных выражений"
  durationInMinutes: 6
  content: "Как правило, когда строка, возвращаемая интерполированным выражением, включается в результирующую строку, в ней нет начальных или конечных пробелов. Специально для экземпляров, в которых вы работаете с набором данных, интерполированные выражения позволяют задать ширину поля и его выравнивание. Это можно продемонстрировать на приведенном ниже примере кода.\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\nИмена элементов выровнены по левому краю, а их количества — по правому. Вы можете указать выравнивание, добавив запятую (\",\") после выражения и назначив ширину поля. Если ширина поля является положительным числом, то поле выравнивается по правому краю:\n\n```text\n{expression, width}\n```\n\nЕсли ширина поля является отрицательным числом, то поле выравнивается по левому краю:\n\n```text\n{expression, -width}\n```\nПопробуйте удалить знаки \"минус\" из интерполированных выражений `{\"Item\",-25}` и `{item.Key,-25}`, а затем снова запустите пример. На этот раз имя элемента выровнено по правому краю.\n\nВы можете совмещать ширину поля и строку формата в одном интерполированном выражении. Сначала идет ширина поля, за которой следует двоеточие, а затем — строка формата. Ознакомьтесь с приведенной ниже простой программой, которая отображает три отформатированные строки с заданной шириной поля.\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: "Вы ознакомились с кратким руководством по интерполированным строкам. \n\nВы можете продолжить работу с этими краткими руководствами в собственной среде локальной разработки. Вы можете познакомиться с основами [локальной разработки](local-environment.md), а затем выбрать краткое руководство. Вы можете попробовать выполнить это упражнение, перейти сразу к следующему краткому руководству или начать заново проходить краткое руководство по [числам в C#](numbers-in-csharp-local.md).\n\nДополнительные сведения о работе с интерполированными строками см. в разделе [Интерполированные строки](../language-reference/keywords/interpolated-strings.md) справочника по C#.\0"
