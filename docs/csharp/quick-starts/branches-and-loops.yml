documentType: Tutorial
title: "Ветви и циклы"
metadata:
  title: "Ветви и циклы"
  description: "В этом кратком руководстве по ветвям и циклам для интерактивного изучения языка C# используется браузер. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере."
  audience: Developer
  level: Beginner
  ms.custom: mvc
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "Использование коллекций с применением C#"
items:
- durationInMinutes: 1
  content: "Из этого краткого руководства вы узнаете, как написать код, при помощи которого проверяются переменные и изменяется путь выполнения на основе этих переменных. Вы напишете код C# в интерактивном режиме и сможете просмотреть результаты его компиляции и выполнения с помощью браузера. Это краткое руководство содержит упражнения, в которых рассматриваются конструкции ветвления и циклов в C#. В рамках этих занятий вы ознакомитесь с основами языка C#.\n"
  ms.openlocfilehash: 93183a172fb5a94751c99c0f59f59af0b045ac09
  ms.sourcegitcommit: 5177d6ae2e9baf026f07ee0631556700a5a193f7
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 11/28/2017
- title: "Принятие решений с помощью оператора if"
  durationInMinutes: 4
  content: "Запустите приведенный ниже код в интерактивном окне. Для этого введите следующий блок кода в интерактивном окне и нажмите кнопку **Выполнить**:\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\nИзмените объявление `b`, чтобы сумма была меньше 10: \n\n```csharp\nint b = 3;\n```\n\nНажмите кнопку **Выполнить** еще раз. Так как ответ меньше 10, никакие данные не выводятся. Проверяемое **условие** имеет значение false. У вас еще нет кода для выполнения, так как вы написали только одну из возможных ветвей для оператора `if` — ветвь true.\n\n> [!TIP]\n> Вероятнее всего, при изучении C# (как и любого другого языка программирования) вы будете допускать ошибки в коде. **Компилятор** найдет эти ошибки и сообщит вам о них. Если результат содержит сообщения об ошибках, внимательно просмотрите пример кода и код в интерактивном окне, чтобы понять, что нужно исправить.\n> Это упражнение поможет вам изучить структуру кода C#.     \n\nВ первом примере показаны возможности `if` и логические типы. *Логическое значение* — это переменная, которая может иметь одно из двух значений: `true` или `false`. Логические переменные в C# определяются особым типом — `bool`. Оператор `if` проверяет значение `bool`. Если значение `true`, выполняется оператор, следующий после `if`. В противном случае он пропускается. \n\nЭтот процесс проверки условий и выполнения операторов на основе этих условий предоставляет широкие возможности. Давайте рассмотрим его подробнее.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Объединение операторов if и else"
  durationInMinutes: 10
  content: "\nЧтобы выполнить разный код в ветвях true и false, создайте ветвь `else`, которая будет выполняться, если условие имеет значение false. Попробуйте выполнить следующий код:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nОператор после ключевого слова `else` выполняется, только если проверяемое условие имеет значение `false`. Объединив операторы `if` и `else` с логическими условиями, вы получите все необходимые возможности.\n\n> [!IMPORTANT]\n> Отступы под операторами `if` и `else` предназначены только для удобства чтения.\n> В языке C# не обязательно ставить отступы или пробелы. Операторы после ключевого слова `if` или `else` будут выполняться на основе условия. В этом кратком руководстве все примеры кода содержат строки, разделенные отступами на основе потока управления операторами.\n\nТак как отступ не обязателен, используйте скобки `{` и `}`, если нужно указать несколько операторов в блоке кода, который выполняется в зависимости от условий. Программисты C# обычно используют эти фигурные скобки во всех предложениях `if` и `else`. Следующий пример аналогичен только что созданному. Выполните его.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Все примеры кода в следующих разделах краткого руководства содержат фигурные скобки в соответствии с используемым соглашением.\n\nМожно проверить более сложные условия:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n`&&` представляет оператор and. То есть для выполнения оператора в ветви true оба условия должны иметь значение true.  В этих примерах также показано, что в каждой условной ветви можно задать несколько операторов. Нужно лишь заключить их в скобки `{` и `}`.\n\nВы также можете использовать оператор `||`, который представляет оператор or.\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Использование циклов для повторения операций"
  durationInMinutes: 6
  content: "Еще одной важной конструкцией для создания больших программ являются **циклы**. Циклы используется для повторения операторов, которые должны выполняться несколько раз. Выполните следующий код в интерактивном окне:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\nОператор `while` проверяет условие и выполняет инструкцию, следующую после `while`. Проверка условия и выполнение этих операторов будут повторяться, пока условие не примет значение false.\n\nВ этом примере представлен еще один новый оператор. Объект `++` после переменной `counter` представляет собой оператор **инкремента**. Он добавляет 1 к значению счетчика и сохраняет это значение в переменной счетчика.\n\n> [!IMPORTANT]\n> Напишите такой код, при выполнении которого значение условия цикла `while` изменится на false. В противном случае будет создан **бесконечный цикл**, в котором выполнение программы никогда не закончится. Мы не будем приводить пример, так как истечет время ожидания подсистемы, в которой выполняется код, и вы не увидите выходных данных из программы.\n\nВ цикле `while` условие проверяется, прежде чем выполнить код, который следует после `while`. А в цикле `do` ... `while` сначала выполняется код, а потом проверяется условие. Это выглядит следующим образом:\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\nЭтот цикл `do` и цикл `while`, приведенный выше, выполняются одинаково. \n\nДавайте перейдем к одному из последних операторов цикла.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Работа с циклом for"
  durationInMinutes: 5
  content: "Еще один стандартный оператор цикла, который можно увидеть в C#, — это цикл `for`. Выполните следующий код в интерактивном окне:\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\nЭтот цикл работает так же, как циклы `while` и `do`, использованные ранее. Оператор `for` состоит из трех частей, которые отвечают за его работу. \n\nПервая часть — **для инициализатора**: `for counter = 0;` объявляет `counter` переменной цикла и задает для ее начальное значение `0`.\n\nСредняя часть — **для условия**: `counter < 10` объявляет, что этот цикл `for` продолжает выполняться, пока значение счетчика меньше 10.\n\nПоследняя часть — **для итератора**: `counter++` определяет, как изменится переменная цикла после выполнения блока, следующего после оператора `for`. В нашем случае определяется, что значение `counter` должно увеличиваться на 1 каждый раз, когда выполняется блок.\n\nПопробуйте сделать это самостоятельно. Попытайтесь выполнить следующие задания:\n\n- Измените инициализатор, чтобы цикл начинался с другого значения.\n- Измените условие, чтобы цикл заканчивался другим значением.\n\nПо окончании попробуйте самостоятельно написать код, чтобы применить полученные знания.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Объединение ветвей и циклов"
  durationInMinutes: 12
  content: "Теперь, когда вы ознакомились с оператором `if` и конструкциями цикла на языке C#, попытайтесь написать код C# для поиска суммы всех целых чисел от 1 до 20, которые делятся на 3.  Вот несколько подсказок:\n\n- оператор `%` позволяет получить остаток от операции деления;\n- оператор `if` предоставляет условие, которое позволяет определить, будет ли число учитываться в сумме;\n- цикл `for` позволяет повторить последовательность шагов для всех чисел от 1 до 20.\n\nПопробуйте самостоятельно. Затем проверьте результат.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Выполнение задачи"
  durationInMinutes: 1
  content: "Вы ознакомились с кратким руководством по ветвям и циклам. \n\nМожно продолжить работу с этими краткими руководствами в собственной среде разработки. В руководстве по [началу работы с .NET за 10 минут](https://www.microsoft.com/net/core), содержатся инструкции по настройке локальной среды разработки. После настройки выполните задачи из [краткого руководства по коллекции списков](arrays-and-collections.md) в локальной среде.\n\nДополнительные сведения об этих понятиях см. в следующих разделах:\n\n[if-else (справочник по C#)](../language-reference/keywords/if-else.md)   \n[while (справочник по C#)](../language-reference/keywords/while.md)   \n[do (справочник по C#)](../language-reference/keywords/do.md)   \n[for (справочник по C#)](../language-reference/keywords/for.md)\0"
