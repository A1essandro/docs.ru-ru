### YamlMime:YamlDocument
documentType: Tutorial
title: <span data-ttu-id="cc506-101">Ветви и циклы</span><span class="sxs-lookup"><span data-stu-id="cc506-101">Branches and loops</span></span>
metadata:
  title: <span data-ttu-id="cc506-102">Ветви и циклы</span><span class="sxs-lookup"><span data-stu-id="cc506-102">Branches and loops</span></span>
  description: '<span data-ttu-id="cc506-103">В этом руководстве о ветвях и циклах для интерактивного изучения языка C# используется браузер.</span><span class="sxs-lookup"><span data-stu-id="cc506-103">In this tutorial about branches and loops, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="cc506-104">Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.</span><span class="sxs-lookup"><span data-stu-id="cc506-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="cc506-105">В этом руководстве объясняется, как написать код, который проверяет переменные и изменяет путь выполнения на основе этих переменных.</span><span class="sxs-lookup"><span data-stu-id="cc506-105">This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="cc506-106">Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения в интерактивном режиме с помощью браузера.</span><span class="sxs-lookup"><span data-stu-id="cc506-106">You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="cc506-107">Это руководство содержит ряд занятий, в которых рассматриваются конструкции ветвления и циклов в C#.</span><span class="sxs-lookup"><span data-stu-id="cc506-107">It contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="cc506-108">В рамках этих занятий вы ознакомитесь с основами языка C#.</span><span class="sxs-lookup"><span data-stu-id="cc506-108">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="cc506-109">Принятие решений с помощью оператора if</span><span class="sxs-lookup"><span data-stu-id="cc506-109">Make decisions using the if statement</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="cc506-110">Запустите приведенный ниже код в интерактивном окне.</span><span class="sxs-lookup"><span data-stu-id="cc506-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="cc506-111">Для этого введите следующий блок кода в интерактивном окне и нажмите кнопку **Выполнить**:</span><span class="sxs-lookup"><span data-stu-id="cc506-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      <span data-ttu-id="cc506-112">Измените объявление `b`, чтобы сумма была меньше 10:</span><span class="sxs-lookup"><span data-stu-id="cc506-112">Modify the declaration of `b` so that the sum is less than 10:</span></span> 

      ```csharp
      int b = 3;
      ```

      <span data-ttu-id="cc506-113">Нажмите кнопку **Выполнить** еще раз.</span><span class="sxs-lookup"><span data-stu-id="cc506-113">Click the **Run** button again.</span></span> <span data-ttu-id="cc506-114">Так как ответ меньше 10, никакие данные не выводятся.</span><span class="sxs-lookup"><span data-stu-id="cc506-114">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="cc506-115">Проверяемое **условие** имеет значение false.</span><span class="sxs-lookup"><span data-stu-id="cc506-115">The **condition** you're testing is false.</span></span> <span data-ttu-id="cc506-116">У вас еще нет кода для выполнения, так как вы написали только одну из возможных ветвей для оператора `if` — ветвь true.</span><span class="sxs-lookup"><span data-stu-id="cc506-116">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>

      > [!TIP]
      > <span data-ttu-id="cc506-117">Вероятнее всего, при изучении C# (как и любого другого языка программирования) вы будете допускать ошибки в коде.</span><span class="sxs-lookup"><span data-stu-id="cc506-117">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="cc506-118">**Компилятор** найдет эти ошибки и сообщит вам о них.</span><span class="sxs-lookup"><span data-stu-id="cc506-118">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="cc506-119">Если результат содержит сообщения об ошибках, внимательно просмотрите пример кода и код в интерактивном окне, чтобы понять, что нужно исправить.</span><span class="sxs-lookup"><span data-stu-id="cc506-119">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="cc506-120">Это упражнение поможет вам изучить структуру кода C#.</span><span class="sxs-lookup"><span data-stu-id="cc506-120">That exercise will help you learn the structure of C# code.</span></span>     

      <span data-ttu-id="cc506-121">В первом примере показаны возможности `if` и логические типы.</span><span class="sxs-lookup"><span data-stu-id="cc506-121">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="cc506-122">*Логическое значение* — это переменная, которая может иметь одно из двух значений: `true` или `false`.</span><span class="sxs-lookup"><span data-stu-id="cc506-122">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="cc506-123">Логические переменные в C# определяются особым типом — `bool`.</span><span class="sxs-lookup"><span data-stu-id="cc506-123">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="cc506-124">Оператор `if` проверяет значение `bool`.</span><span class="sxs-lookup"><span data-stu-id="cc506-124">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="cc506-125">Если значение `true`, выполняется оператор, следующий после `if`.</span><span class="sxs-lookup"><span data-stu-id="cc506-125">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="cc506-126">В противном случае он пропускается.</span><span class="sxs-lookup"><span data-stu-id="cc506-126">Otherwise, it is skipped.</span></span> 

      <span data-ttu-id="cc506-127">Этот процесс проверки условий и выполнения операторов на основе этих условий предоставляет широкие возможности.</span><span class="sxs-lookup"><span data-stu-id="cc506-127">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="cc506-128">Давайте рассмотрим его подробнее.</span><span class="sxs-lookup"><span data-stu-id="cc506-128">Let's explore more.</span></span>

      > [!NOTE]
      > <span data-ttu-id="cc506-129">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="cc506-129">This online coding experience is in preview mode.</span></span> <span data-ttu-id="cc506-130">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="cc506-130">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="cc506-131">Объединение операторов if и else</span><span class="sxs-lookup"><span data-stu-id="cc506-131">Make if and else work together</span></span>
    durationInMinutes: 10
    content: |

      <span data-ttu-id="cc506-132">Чтобы выполнить разный код в ветвях true и false, создайте ветвь `else`, которая будет выполняться, если условие имеет значение false.</span><span class="sxs-lookup"><span data-stu-id="cc506-132">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id="cc506-133">Попробуйте выполнить следующий код:</span><span class="sxs-lookup"><span data-stu-id="cc506-133">Try this:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      <span data-ttu-id="cc506-134">Оператор после ключевого слова `else` выполняется, только если проверяемое условие имеет значение `false`.</span><span class="sxs-lookup"><span data-stu-id="cc506-134">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id="cc506-135">Объединив операторы `if` и `else` с логическими условиями, вы получите все необходимые возможности.</span><span class="sxs-lookup"><span data-stu-id="cc506-135">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="cc506-136">Отступы под операторами `if` и `else` предназначены только для удобства чтения.</span><span class="sxs-lookup"><span data-stu-id="cc506-136">The indentation under the `if` and `else` statements is for human readers.</span></span>
      > <span data-ttu-id="cc506-137">В языке C# не обязательно ставить отступы или пробелы.</span><span class="sxs-lookup"><span data-stu-id="cc506-137">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id="cc506-138">Операторы после ключевого слова `if` или `else` будут выполняться на основе условия.</span><span class="sxs-lookup"><span data-stu-id="cc506-138">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id="cc506-139">В этом руководстве все выполняемые примеры кода содержат строки, отделенные отступом.</span><span class="sxs-lookup"><span data-stu-id="cc506-139">All the samples in this tutorial follow a common practice to indent lines based on execution.</span></span>

      <span data-ttu-id="cc506-140">Так как отступ не обязателен, используйте скобки `{` и `}`, если нужно указать несколько операторов в блоке кода, который выполняется в зависимости от условий.</span><span class="sxs-lookup"><span data-stu-id="cc506-140">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id="cc506-141">Программисты C# обычно используют эти фигурные скобки во всех предложениях `if` и `else`.</span><span class="sxs-lookup"><span data-stu-id="cc506-141">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id="cc506-142">Следующий пример аналогичен только что созданному.</span><span class="sxs-lookup"><span data-stu-id="cc506-142">The following example is the same as what you just created.</span></span> <span data-ttu-id="cc506-143">Выполните его.</span><span class="sxs-lookup"><span data-stu-id="cc506-143">Try it.</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > <span data-ttu-id="cc506-144">Все примеры кода в следующих разделах руководства содержат фигурные скобки в соответствии с принятой практикой.</span><span class="sxs-lookup"><span data-stu-id="cc506-144">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>

      <span data-ttu-id="cc506-145">Можно проверить более сложные условия:</span><span class="sxs-lookup"><span data-stu-id="cc506-145">You can test more complicated conditions:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      <span data-ttu-id="cc506-146">`&&` представляет оператор and.</span><span class="sxs-lookup"><span data-stu-id="cc506-146">The `&&` represents "and".</span></span> <span data-ttu-id="cc506-147">То есть для выполнения оператора в ветви true оба условия должны иметь значение true.</span><span class="sxs-lookup"><span data-stu-id="cc506-147">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id="cc506-148">В этих примерах также показано, что в каждой условной ветви можно задать несколько операторов. Нужно лишь заключить их в скобки `{` и `}`.</span><span class="sxs-lookup"><span data-stu-id="cc506-148">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>

      <span data-ttu-id="cc506-149">Вы также можете использовать оператор `||`, который представляет оператор or.</span><span class="sxs-lookup"><span data-stu-id="cc506-149">You can also use  `||` to represent "or":</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="cc506-150">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="cc506-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="cc506-151">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="cc506-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="cc506-152">Использование циклов для повторения операций</span><span class="sxs-lookup"><span data-stu-id="cc506-152">Use loops to repeat operations</span></span>
    durationInMinutes: 6
    content: |
      <span data-ttu-id="cc506-153">Еще одной важной конструкцией для создания больших программ являются **циклы**.</span><span class="sxs-lookup"><span data-stu-id="cc506-153">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="cc506-154">Циклы используется для повторения операторов, которые должны выполняться несколько раз.</span><span class="sxs-lookup"><span data-stu-id="cc506-154">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="cc506-155">Выполните следующий код в интерактивном окне:</span><span class="sxs-lookup"><span data-stu-id="cc506-155">Try this code in the interactive window:</span></span>

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      <span data-ttu-id="cc506-156">Оператор `while` проверяет условие и выполняет инструкцию, следующую после `while`.</span><span class="sxs-lookup"><span data-stu-id="cc506-156">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="cc506-157">Проверка условия и выполнение этих операторов будут повторяться, пока условие не примет значение false.</span><span class="sxs-lookup"><span data-stu-id="cc506-157">It will repeat checking the condition and executing those statements until the condition is false.</span></span>

      <span data-ttu-id="cc506-158">В этом примере представлен еще один новый оператор.</span><span class="sxs-lookup"><span data-stu-id="cc506-158">There's one other new operator in this example.</span></span> <span data-ttu-id="cc506-159">Объект `++` после переменной `counter` представляет собой оператор **инкремента**.</span><span class="sxs-lookup"><span data-stu-id="cc506-159">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="cc506-160">Он добавляет 1 к значению счетчика и сохраняет это значение в переменной счетчика.</span><span class="sxs-lookup"><span data-stu-id="cc506-160">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="cc506-161">Напишите такой код, при выполнении которого значение условия цикла `while` изменится на false.</span><span class="sxs-lookup"><span data-stu-id="cc506-161">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="cc506-162">В противном случае будет создан **бесконечный цикл**, в котором выполнение программы никогда не закончится.</span><span class="sxs-lookup"><span data-stu-id="cc506-162">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="cc506-163">Мы не будем приводить пример, так как истечет время ожидания подсистемы, в которой выполняется код, и вы не увидите выходных данных из программы.</span><span class="sxs-lookup"><span data-stu-id="cc506-163">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>

      <span data-ttu-id="cc506-164">В цикле `while` условие проверяется, прежде чем выполнить код, который следует после `while`.</span><span class="sxs-lookup"><span data-stu-id="cc506-164">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="cc506-165">А в цикле `do` ... `while` сначала выполняется код, а потом проверяется условие.</span><span class="sxs-lookup"><span data-stu-id="cc506-165">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="cc506-166">Это выглядит следующим образом:</span><span class="sxs-lookup"><span data-stu-id="cc506-166">It looks like this:</span></span>

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      <span data-ttu-id="cc506-167">Этот цикл `do` и цикл `while`, приведенный выше, выполняются одинаково.</span><span class="sxs-lookup"><span data-stu-id="cc506-167">This `do` loop and the earlier `while` loop work the same.</span></span> 

      <span data-ttu-id="cc506-168">Давайте перейдем к одному из последних операторов цикла.</span><span class="sxs-lookup"><span data-stu-id="cc506-168">Let's move on to one last loop statement.</span></span>

      > [!NOTE]
      > <span data-ttu-id="cc506-169">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="cc506-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="cc506-170">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="cc506-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="cc506-171">Работа с циклом for</span><span class="sxs-lookup"><span data-stu-id="cc506-171">Work with the for loop</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="cc506-172">Еще один стандартный оператор цикла, который можно увидеть в C#, — это цикл `for`.</span><span class="sxs-lookup"><span data-stu-id="cc506-172">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="cc506-173">Выполните следующий код в интерактивном окне:</span><span class="sxs-lookup"><span data-stu-id="cc506-173">Try this code in the interactive window:</span></span>

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      <span data-ttu-id="cc506-174">Этот цикл работает так же, как циклы `while` и `do`, использованные ранее.</span><span class="sxs-lookup"><span data-stu-id="cc506-174">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="cc506-175">Оператор `for` состоит из трех частей, которые отвечают за его работу.</span><span class="sxs-lookup"><span data-stu-id="cc506-175">The `for` statement has three parts that control how it works.</span></span> 

      <span data-ttu-id="cc506-176">Первая часть — **для инициализатора**: `for counter = 0;` объявляет `counter` переменной цикла и задает для ее начальное значение `0`.</span><span class="sxs-lookup"><span data-stu-id="cc506-176">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>

      <span data-ttu-id="cc506-177">Средняя часть — **для условия**: `counter < 10` объявляет, что этот цикл `for` продолжает выполняться, пока значение счетчика меньше 10.</span><span class="sxs-lookup"><span data-stu-id="cc506-177">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>

      <span data-ttu-id="cc506-178">Последняя часть — **для итератора**: `counter++` определяет, как изменится переменная цикла после выполнения блока, следующего после оператора `for`.</span><span class="sxs-lookup"><span data-stu-id="cc506-178">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="cc506-179">В нашем случае определяется, что значение `counter` должно увеличиваться на 1 каждый раз, когда выполняется блок.</span><span class="sxs-lookup"><span data-stu-id="cc506-179">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>

      <span data-ttu-id="cc506-180">Попробуйте сделать это самостоятельно.</span><span class="sxs-lookup"><span data-stu-id="cc506-180">Experiment with these yourself.</span></span> <span data-ttu-id="cc506-181">Попытайтесь выполнить следующие задания:</span><span class="sxs-lookup"><span data-stu-id="cc506-181">Try each of the following:</span></span>

      - <span data-ttu-id="cc506-182">Измените инициализатор, чтобы цикл начинался с другого значения.</span><span class="sxs-lookup"><span data-stu-id="cc506-182">Change the initializer to start at a different value.</span></span>
      - <span data-ttu-id="cc506-183">Измените условие, чтобы цикл заканчивался другим значением.</span><span class="sxs-lookup"><span data-stu-id="cc506-183">Change the condition to stop at a different value.</span></span>

      <span data-ttu-id="cc506-184">По окончании попробуйте самостоятельно написать код, чтобы применить полученные знания.</span><span class="sxs-lookup"><span data-stu-id="cc506-184">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>

      > [!NOTE]
      > <span data-ttu-id="cc506-185">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="cc506-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="cc506-186">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="cc506-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="cc506-187">Объединение ветвей и циклов</span><span class="sxs-lookup"><span data-stu-id="cc506-187">Combining branches and loops</span></span>
    durationInMinutes: 12
    content: |
      <span data-ttu-id="cc506-188">Теперь, когда вы ознакомились с оператором `if` и конструкциями цикла на языке C#, попытайтесь написать код C# для поиска суммы всех целых чисел от 1 до 20, которые делятся на 3.</span><span class="sxs-lookup"><span data-stu-id="cc506-188">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="cc506-189">Вот несколько подсказок:</span><span class="sxs-lookup"><span data-stu-id="cc506-189">Here are a few hints:</span></span>

      - <span data-ttu-id="cc506-190">оператор `%` позволяет получить остаток от операции деления;</span><span class="sxs-lookup"><span data-stu-id="cc506-190">The `%` operator gives you the remainder of a division operation.</span></span>
      - <span data-ttu-id="cc506-191">оператор `if` предоставляет условие, чтобы определить, будет ли число учитываться в сумме;</span><span class="sxs-lookup"><span data-stu-id="cc506-191">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>
      - <span data-ttu-id="cc506-192">цикл `for` позволяет повторить последовательность шагов для всех чисел от 1 до 20.</span><span class="sxs-lookup"><span data-stu-id="cc506-192">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>

      <span data-ttu-id="cc506-193">Попробуйте самостоятельно.</span><span class="sxs-lookup"><span data-stu-id="cc506-193">Try it yourself.</span></span> <span data-ttu-id="cc506-194">Затем проверьте результат.</span><span class="sxs-lookup"><span data-stu-id="cc506-194">Then check how you did.</span></span>

      > [!NOTE]
      > <span data-ttu-id="cc506-195">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="cc506-195">This online coding experience is in preview mode.</span></span> <span data-ttu-id="cc506-196">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="cc506-196">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="cc506-197">Выполнение задачи</span><span class="sxs-lookup"><span data-stu-id="cc506-197">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="cc506-198">Вы ознакомились с руководством по ветвям и циклам.</span><span class="sxs-lookup"><span data-stu-id="cc506-198">You've completed the "branches and loops" tutorial.</span></span> <span data-ttu-id="cc506-199">Дополнительные сведения об этих понятиях см. в следующих разделах:</span><span class="sxs-lookup"><span data-stu-id="cc506-199">You can learn more about these concepts in these topics:</span></span>

      <span data-ttu-id="cc506-200">[if-else (справочник по C#)](../language-reference/keywords/if-else.md) </span><span class="sxs-lookup"><span data-stu-id="cc506-200">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  
      <span data-ttu-id="cc506-201">[while (справочник по C#)](../language-reference/keywords/while.md) </span><span class="sxs-lookup"><span data-stu-id="cc506-201">[While statement](../language-reference/keywords/while.md) </span></span>  
      <span data-ttu-id="cc506-202">[do (справочник по C#)](../language-reference/keywords/do.md) </span><span class="sxs-lookup"><span data-stu-id="cc506-202">[Do statement](../language-reference/keywords/do.md) </span></span>  
      [<span data-ttu-id="cc506-203">for (справочник по C#)</span><span class="sxs-lookup"><span data-stu-id="cc506-203">For statement</span></span>](../language-reference/keywords/for.md)