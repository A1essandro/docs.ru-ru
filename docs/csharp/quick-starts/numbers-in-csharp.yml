### YamlMime:Tutorial
title: Числа в C#
metadata:
  title: Краткие руководства по C#. Интерактивное руководство по числам в C#
  description: В этом кратком руководстве по числовым типам в C# для интерактивного изучения используется браузер. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.
  audience: Developer
  ms.topic: quickstart
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Ветви и циклы в C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 473d0619ad9a68e9d5aea0cf5fa9daf092f623f5
  ms.sourcegitcommit: 2eceb05f1a5bb261291a1f6a91c5153727ac1c19
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 09/04/2018
  ms.locfileid: "43507860"
items:
- durationInMinutes: 1
  content: >
    Это краткое руководство поможет в интерактивном изучении числовых типов в C#. С помощью браузера вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения. Руководство содержит ряд уроков, в которых рассматриваются числа и математические операции в C#. В рамках этих занятий вы ознакомитесь с основами языка C#.
- title: Вычисления с целыми числами
  durationInMinutes: 4
  content: "Запустите приведенный ниже код в интерактивном окне. Для этого введите следующий блок кода в интерактивном окне и нажмите кнопку **Выполнить**:\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\nВы увидели одну из основных математических операций с целыми числами. Тип `int` представляет **целое** положительное или отрицательное число. Для сложения используйте символ `+`. Другие стандартные математические операции с целыми числами включают:\n\n- `-` — вычитание;\n- `*` — умножение;\n- `/` — деление.\n\n> [!TIP]\n> Вы можете изучить их самостоятельно с помощью этого краткого руководства, изменив написанный код в интерактивном окне. Это краткое руководство содержит примеры, которые вы можете повторить на каждом этапе.\n\nНачните с ознакомления с различными операциями. Измените третью строку, чтобы попробовать выполнить каждую операцию. После каждого изменения нажимайте кнопку **Выполнить**.\n\nВычитание:\n\n```csharp\nint c = a - b;\n```\n\nУмножение:\n\n```csharp\nint c = a * b;\n```\n\nДеление: \n\n```csharp\nint c = a / b;\n```\n\nМожно также поэкспериментировать, выполнив несколько математических операций в одной строке.\n\n> [!TIP]\n> Вероятнее всего, при изучении C# (как и любого другого языка программирования) вы будете допускать ошибки в коде. **Компилятор** найдет эти ошибки и сообщит вам о них. Если результат содержит сообщения об ошибках, внимательно просмотрите пример кода и код в интерактивном окне, чтобы понять, что нужно исправить.\n> Это упражнение поможет вам изучить структуру кода C#.     \n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Изучение порядка операций
  durationInMinutes: 7
  content: >
    Язык C# определяет приоритет математических операций в соответствии с правилами математики.

    Умножение и деление имеют приоритет над сложением и вычитанием.

    Убедитесь в этом, запустив следующий код в интерактивном окне:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    В выходных данных видно, что умножение выполняется раньше сложения.


    Можно применить другую последовательность операций. Для этого операции, которые должны выполняться первыми, нужно заключить в скобки:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a  + b) * c;

    Console.WriteLine(d);

    ```


    Поэкспериментируйте, объединяя различные операции. Замените четвертую строку примерно таким кодом:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Возможно, вы заметили интересное поведение целых чисел. Деление целых чисел всегда дает результат в виде целого числа, даже если ожидаемый результат содержит десятичную или дробную часть.


    Если вы еще не видели пример такого поведения, выполните следующий код:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    Нажмите кнопку **Выполнить**, чтобы просмотреть результаты.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Изучение точности и ограничений для целых чисел
  durationInMinutes: 5
  content: >
    В последнем примере вы увидели, что при делении целых чисел результат усекается.

    Вы можете получить **остаток** с помощью оператора **остатка от деления**, который обозначается символом `%`:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    Тип целых чисел C# характеризуется еще одним отличием от математических целых: тип `int` имеет минимальные и максимальные ограничения. Выполните этот код в интерактивном окне, чтобы увидеть ограничения:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Если при вычислении выводится значение вне этих пределов, возникает условие **потери значимости** или **переполнения**. Ответ должен находиться в диапазоне от минимального до максимального значения. Добавьте эти две строки в интерактивное окно, чтобы увидеть пример:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Обратите внимание, что ответ очень близок к минимальному целому числу (отрицательное значение). Он совпадает со значением `min + 2`. Оператор сложения **вызвал переполнение** допустимых значений для целых чисел.

    Ответ является очень большим отрицательным числом, так как переполнение покрывает диапазон от наибольшего целого числа до наименьшего.


    Существуют другие числовые типы с различными ограничениями и точностью, которые можно использовать, если тип `int` не соответствует вашим требованиям. Рассмотрим их.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Работа с типом double
  durationInMinutes: 5
  content: "Числовой тип `double` представляет число с плавающей запятой двойной точности. Эти термины могут быть новыми для вас. Число **с плавающей запятой** можно использовать для представления нецелых чисел, которые могут быть очень большими или малыми. **Двойная точность** означает, что для хранения этих чисел используется большая точность, чем **одиночная**. На современных компьютерах числа с двойной точностью используется чаще, чем с одиночной.\nРассмотрим их. Запустите следующий код в интерактивном окне и посмотрите на результат:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nОбратите внимание, что ответ включает десятичную долю частного. Попробуйте более сложное выражение с типом double:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nДиапазон значений типа double гораздо больше, чем диапазон значений целых чисел. Запустите этот код в интерактивном окне:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nЗначения выводятся в экспоненциальном представлении. Число слева от символа `E` является значащим. Число справа — это показатель степени, который равен 10. \n\nТак же, как десятичные числа в математике, значения double в C# могут содержать ошибки округления. Выполните этот код:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nВы знаете, что периодическая десятичная дробь `0.3` не равняется `1/3`.\n\n***Задача***\n\nВыполните другие вычисления с большими числами, малыми числами, умножением и делением с помощью типа `double`.  Попробуйте выполнить более сложные вычисления.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Работа с типами с фиксированной запятой
  durationInMinutes: 8
  content: "Вы уже ознакомились с базовыми числовыми типами в C# — целыми числами и числами типа double.  Осталось изучить еще один тип: `decimal`. Тип `decimal` имеет меньший диапазон, но большую точность, чем `double`. Термин **фиксированная запятая** означает, что десятичный (или двоичный) разделитель не перемещается. Например:\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\nОбратите внимание, что диапазон меньше, чем для типа `double`. Вы можете убедиться в повышении точности при использовании типа decimal, выполнив следующий код:\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\nСуффикс `M` возле чисел указывает, что для константы должен использоваться тип `decimal`.\n\nОбратите внимание, что при вычислении с использованием типа decimal справа от запятой содержится больше цифр. \n\n***Задача***\n\nТеперь, когда вы ознакомились с разными числовыми типами, напишите код, который позволяет вычислить площадь круга с радиусом 2,50 см. Помните, что площадь круга равна квадрату радиуса, умноженному на число пи. Подсказка: в .NET есть константа пи <xref:System.Math.PI?displayProperty=nameWithType>, которую можно использовать. \n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n\nВы должны получить ответ от 19 до 20.\n"
- title: Выполнение задачи
  durationInMinutes: 1
  content: >
    В результате получилось нечто подобное?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    При желании поэкспериментируйте с другими формулами.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- content: "Вы выполнили задачи краткого руководства \"Числа в C#\". \n\nМожно продолжить работу с этими краткими руководствами в собственной среде разработки. Вы можете познакомиться с основами [локальной разработки](local-environment.md), а затем выбрать краткое руководство. Вы можете попробовать выполнить это упражнение, перейти сразу к следующему краткому руководству или начать заново проходить краткое руководство по [числам в C#](numbers-in-csharp-local.md).\n\nДополнительные сведения о числах в C# см. в следующих статьях:\n\n[Таблица целых типов](../language-reference/keywords/integral-types-table.md)   \n[Таблица типов с плавающей запятой](../language-reference/keywords/floating-point-types-table.md)   \n[Таблица встроенных типов](../language-reference/keywords/built-in-types-table.md)   \n[Таблица неявных числовых преобразований](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[Таблица явных числовых преобразований](../language-reference/keywords/explicit-numeric-conversions-table.md)"
