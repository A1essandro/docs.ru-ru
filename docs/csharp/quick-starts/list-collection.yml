### YamlMime:Tutorial
title: "Использование коллекций с применением C#"
metadata:
  title: "Краткие руководства по C#. Интерактивное руководство по коллекциям"
  description: "В этом руководстве для интерактивного изучения C# используется браузер. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере."
  audience: Developer
  ms.topic: get-started-article
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.openlocfilehash: 483b403b35eef4405b1c7debc52678aef19cb9b6
  ms.sourcegitcommit: d2da0142247ef42a219a5d2907f153e62dc6ea0d
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 02/01/2018
items:
- durationInMinutes: 1
  content: "Это краткое руководство поможет в интерактивном изучении C#. Прямо в браузере вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения. Руководство содержит ряд задач по созданию, изменению и изучению коллекций и массивов.\n"
- title: "Создание списков"
  durationInMinutes: 2
  content: "Запустите приведенный ниже код в интерактивном окне. Для этого введите следующий блок кода в интерактивном окне (замените \"<name>\" своим именем) и нажмите кнопку **Выполнить**:\n\n```csharp\nvar names = new List<string> { \"<name>\", \"Ana\", \"Felipe\" };\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\nВы создали список строк, добавили в него три имени и вывели имена с преобразованием всех букв в прописные. Для циклического прохода по списку вы примените концепции, которые изучили в предыдущих кратких руководствах.\n\nВ коде для отображения имен используются **интерполированные строки**.  Если перед `string` добавить символ `$`, код C# можно внедрять в объявление строки. Фактическая строка заменяет код C# генерируемым значением. В этом примере она заменяет `{name.ToUpper()}` именами, буквы каждого из которых преобразованы в прописные, так как вызван метод <xref:System.String.ToUpper%2A>.\n\nПродолжим изучение.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Изменение содержимого списка"
  durationInMinutes: 3
  content: "В созданной коллекции используется тип <xref:System.Collections.Generic.List%601>. При применении такого типа сохраняются последовательности элементов. Тип элементов указывается в угловых скобках.\n\nВажный аспект типа <xref:System.Collections.Generic.List%601> — возможность увеличения или уменьшения, что позволяет добавлять или удалять элементы. Добавьте следующий фрагмент после написанного кода:\n\n```csharp\nConsole.WriteLine();\nnames.Add(\"Maria\");\nnames.Add(\"Bill\");\nnames.Remove(\"Ana\");\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\nВ конец списка добавлены еще два имени. При этом одно имя удалено.\n\n<xref:System.Collections.Generic.List%601> позволяет добавлять ссылки на отдельные элементы по **индексу**. Доступ к элементам осуществляется при помощи токенов `[` и `]`. Добавьте следующий фрагмент после написанного кода и протестируйте результат:\n\n```csharp\nConsole.WriteLine($\"My name is {names[0]}.\");\nConsole.WriteLine($\"I've added {names[2]} and {names[3]} to the list.\");\n```\n\nДоступ за пределами списка не предоставляется. Вы можете проверить, как долго в списке используется свойство <xref:System.Collections.Generic.List%601.Count%2A>. Добавьте следующий код, чтобы протестировать его:\n\n```csharp\nConsole.WriteLine($\"The list has {names.Count} people in it\");\n```\n\nЕще раз нажмите кнопку **Выполнить**, чтобы просмотреть результаты. В C# индексы начинаются с 0, поэтому максимальный допустимый индекс меньше, чем число элементов в списке.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Поиск по спискам и их сортировка"
  durationInMinutes: 5
  content: "В наших примерах используются сравнительно небольшие списки. Но приложения часто создают списки с гораздо большим количеством элементов, иногда они исчисляются в тысячах. Чтобы найти элементы в таких больших коллекциях, необходимо выполнить поиск различных элементов по списку. Метод <xref:System.Collections.Generic.List%601.IndexOf%2A> выполняет поиск элемента и возвращает его индекс. Протестируйте его, чтобы узнать, как он работает.  Добавьте следующий фрагмент после написанного кода:\n\n```csharp\nvar index = names.IndexOf(\"Felipe\");\nif (index != -1)\n  Console.WriteLine($\"The name {names[index]} is at index {index}\");\n\nvar notFound = names.IndexOf(\"Not Found\");\n  Console.WriteLine($\"When an item is not found, IndexOf returns {notFound}\");\n```\n\nМы не всегда можем знать, присутствует ли элемент в списке, поэтому нужно обязательно проверять индекс, возвращенный <xref:System.Collections.Generic.List%601.IndexOf%2A>. Если он имеет значение 1, элемент не найден.\n\nКроме того, можно сортировать элементы в списке. Метод <xref:System.Collections.Generic.List%601.Sort%2A> сортирует все элементы списка в обычном порядке (при использовании строк — в алфавитном порядке). Добавьте следующий фрагмент и снова выполните код:\n\n```csharp\nnames.Sort();\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Списки других типов"
  durationInMinutes: 5
  content: "Вы уже использовали в списках тип `string`. Создадим <xref:System.Collections.Generic.List%601> с использованием другого типа. Сначала создадим набор чисел. Удалите написанный код, заменив его следующим:\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n```\n\nБудет создан список целых чисел. Для первых двух целых чисел будет задано значение 1. Это два первых значения *последовательности Фибоначчи*. Каждое следующее число Фибоначчи — это сумма двух предыдущих чисел. Добавьте этот код:\n\n```csharp\nvar previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\nvar previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n\nfibonacciNumbers.Add(previous + previous2);\n\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nНажмите кнопку **Выполнить**, чтобы просмотреть результаты.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Задача"
  durationInMinutes: 10
  content: "Попробуйте объединить некоторые идеи из этого и предыдущих занятий. Расширьте код с числами Фибоначчи, который вы создали. Напишите и протестируйте код для создания первых 20 чисел в последовательности. Подсказка: 20-е число Фибоначчи — 6765.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Выполнение задачи"
  durationInMinutes: 3
  content: "В результате получилось нечто подобное?\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nПри каждой итерации цикла суммируются два последних целых числа в списке. Полученное значение добавляется в список. Цикл повторяется, пока в список не будут добавлены 20 элементов.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: "Вы выполнили все задачи в этом кратком руководстве. Это заключительное интерактивное краткое руководство. Вы можете продолжить работу с этими краткими руководствами в собственной среде разработки. Вы можете ознакомиться с основами [локальной разработки](local-environment.md), а затем выбрать краткое руководство. Вы также можете попробовать выполнить это упражнение, перейти сразу к следующему краткому руководству или начать заново проходить краткое руководство по [числам в C#](numbers-in-csharp-local.md).\n\nДополнительные сведения о работе с типом `List` см. в разделе о [коллекциях](../../standard/collections/index.md) [руководства по .NET](../../standard/index.md). Также в нем описаны многие другие типы коллекций.\0"
