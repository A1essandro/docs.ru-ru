### YamlMime:Tutorial
title: Коллекции в C#
metadata:
  title: Краткие руководства по C#. Интерактивное руководство по коллекциям
  description: В этом руководстве для интерактивного изучения C# используется браузер. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.
  audience: Developer
  ms.topic: quickstart
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 79861f7a04939fafd77bd7a905b8fef0e94b8966
  ms.sourcegitcommit: 15109844229ade1c6449f48f3834db1b26907824
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 05/07/2018
items:
- durationInMinutes: 1
  content: >
    Это краткое руководство поможет в интерактивном изучении C#. Прямо в браузере вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения. Руководство содержит ряд задач по созданию, изменению и изучению коллекций и массивов.
- title: Создание списков
  durationInMinutes: 2
  content: >
    Запустите приведенный ниже код в интерактивном окне. Для этого введите следующий блок кода в интерактивном окне (замените "<name>" своим именем) и нажмите кнопку **Выполнить**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Вы создали список строк, добавили в него три имени и вывели имена с преобразованием всех букв в прописные. Для циклического прохода по списку вы примените концепции, которые изучили в предыдущих кратких руководствах.


    В коде для отображения имен используется функция [интерполяции строк](../language-reference/tokens/interpolated.md). Если перед `string` добавить символ `$`, код C# можно внедрять в объявление строки. Фактическая строка заменяет код C# генерируемым значением. В этом примере она заменяет `{name.ToUpper()}` именами, буквы каждого из которых преобразованы в прописные, так как вызван метод <xref:System.String.ToUpper%2A>.


    Продолжим изучение.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Изменение содержимого списка
  durationInMinutes: 3
  content: >
    В созданной коллекции используется тип <xref:System.Collections.Generic.List%601>. При применении такого типа сохраняются последовательности элементов. Тип элементов указывается в угловых скобках.


    Важный аспект типа <xref:System.Collections.Generic.List%601> — возможность увеличения или уменьшения, что позволяет добавлять или удалять элементы. Добавьте следующий фрагмент после написанного кода:


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    В конец списка добавлены еще два имени. При этом одно имя удалено.


    <xref:System.Collections.Generic.List%601> позволяет добавлять ссылки на отдельные элементы по **индексу**. Доступ к элементам осуществляется при помощи токенов `[` и `]`. Добавьте следующий фрагмент после написанного кода и протестируйте результат:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Доступ за пределами списка не предоставляется. Вы можете проверить, как долго в списке используется свойство <xref:System.Collections.Generic.List%601.Count%2A>. Добавьте следующий код, чтобы протестировать его:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Еще раз нажмите кнопку **Выполнить**, чтобы просмотреть результаты. В C# индексы начинаются с 0, поэтому максимальный допустимый индекс меньше, чем число элементов в списке.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Поиск по спискам и их сортировка
  durationInMinutes: 5
  content: >
    В наших примерах используются сравнительно небольшие списки. Но приложения часто создают списки с гораздо большим количеством элементов, иногда они исчисляются в тысячах. Чтобы найти элементы в таких больших коллекциях, необходимо выполнить поиск различных элементов по списку. Метод <xref:System.Collections.Generic.List%601.IndexOf%2A> выполняет поиск элемента и возвращает его индекс. Протестируйте его, чтобы узнать, как он работает.  Добавьте следующий фрагмент после написанного кода:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Мы не всегда можем знать, присутствует ли элемент в списке, поэтому нужно обязательно проверять индекс, возвращенный <xref:System.Collections.Generic.List%601.IndexOf%2A>. Если он имеет значение 1, элемент не найден.


    Кроме того, можно сортировать элементы в списке. Метод <xref:System.Collections.Generic.List%601.Sort%2A> сортирует все элементы списка в обычном порядке (при использовании строк — в алфавитном порядке). Добавьте следующий фрагмент и снова выполните код:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Списки других типов
  durationInMinutes: 5
  content: >
    Вы уже использовали в списках тип `string`. Создадим <xref:System.Collections.Generic.List%601> с использованием другого типа. Сначала создадим набор чисел. Удалите написанный код, заменив его следующим:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Будет создан список целых чисел. Для первых двух целых чисел будет задано значение 1. Это два первых значения *последовательности Фибоначчи*. Каждое следующее число Фибоначчи — это сумма двух предыдущих чисел. Добавьте этот код:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Нажмите кнопку **Выполнить**, чтобы просмотреть результаты.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Задача
  durationInMinutes: 10
  content: >
    Попробуйте объединить некоторые идеи из этого и предыдущих занятий. Расширьте код с числами Фибоначчи, который вы создали. Напишите и протестируйте код для создания первых 20 чисел в последовательности. Подсказка: 20-е число Фибоначчи — 6765.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Выполнение задачи
  durationInMinutes: 3
  content: "В результате получилось нечто подобное?\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nПри каждой итерации цикла суммируются два последних целых числа в списке. Полученное значение добавляется в список. Цикл повторяется, пока в список не будут добавлены 20 элементов.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: >-
    Вы выполнили все задачи в этом кратком руководстве. Это заключительное интерактивное краткое руководство. Вы можете продолжить работу с этими краткими руководствами в собственной среде разработки. Вы можете ознакомиться с основами [локальной разработки](local-environment.md), а затем выбрать краткое руководство. Вы также можете попробовать выполнить это упражнение, перейти сразу к следующему краткому руководству или начать заново проходить краткое руководство по [числам в C#](numbers-in-csharp-local.md).


    Дополнительные сведения о работе с типом `List` см. в разделе о [коллекциях](../../standard/collections/index.md) [руководства по .NET](../../standard/index.md). Также в нем описаны многие другие типы коллекций.
