### YamlMime:Tutorial
title: Hello World — интерактивный учебник по основам C#
metadata:
  title: Hello World — интерактивный учебник по основам C#
  description: В этом руководстве для интерактивного изучения C# используется браузер. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Числа в C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: d9992c65b2f5f0f73af9f3234ac389b1c8647337
  ms.sourcegitcommit: c93fd5139f9efcf6db514e3474301738a6d1d649
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 10/28/2018
  ms.locfileid: "50200201"
items:
- durationInMinutes: 1
  content: >
    Это руководство поможет в интерактивном изучении C#. С помощью браузера вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения. Руководство содержит ряд задач, первой из которых будет написание программы Hello World. В рамках этих занятий вы ознакомитесь с основами языка C#.
- title: Запуск первой программы C#
  durationInMinutes: 2
  content: "Запустите приведенный ниже код в интерактивном окне. Для этого введите следующий блок кода в интерактивном окне и нажмите кнопку **Выполнить**:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nПоздравляем! Вы запустили первую программу C#. Это простая программа, которая выводит сообщение \"Hello World!\". Для вывода используется метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>. `Console` — это тип, который представляет окно консоли. `WriteLine` — это метод типа `Console`, который выводит строку текста в текстовой консоли.\n\nПродолжим изучение. Далее в этом уроке рассматривается работа с типом `string`, который представляет текст на языке C#. Как и для типа `Console`, для типа `string` используются методы. Методы `string` работают с текстом. \n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Объявление и использование переменных
  durationInMinutes: 3
  content: "При помощи вашей первой программы на экран выводится `string` \"Hello World!\". \n\n> [!TIP]\n> Вероятнее всего, при изучении C# (как и любого другого языка программирования) вы будете допускать ошибки в коде. **Компилятор** найдет эти ошибки и сообщит вам о них. Если результат содержит сообщения об ошибках, внимательно просмотрите пример кода и код в интерактивном окне, чтобы понять, что нужно исправить.\n> Это упражнение поможет вам изучить структуру кода C#. \n\nФункции первой программы ограничиваются выводом одного сообщения. Вы можете создавать более полезные программы с использованием **переменных**. **Переменная** — это символ, который вы можете использовать для выполнения одного и того же кода с разными значениями. Попробуем сделать это. Замените код, написанный в интерактивном окне, следующим:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nВ первой строке объявляется переменная `aFriend` и ей назначается значение Bill. Вторая строка выводит имя.\n\nЛюбой объявляемой переменной можно присваивать разные значения. Можно назначить переменной имя одного из ваших друзей. Добавьте эти две строки в интерактивном окне после кода, который вы уже добавили:\n\n```csharp\naFriend = \"Maira\";\nConsole.WriteLine(aFriend);\n```\n\nОбратите внимание, что при помощи одной и той же строки кода выводятся два разных сообщения. Они формируются на основе значения, которое хранится в переменной `aFriend`.\n\nКак вы могли заметить, слово Hello в двух последних сообщениях отсутствует. Исправим это.  Измените строки, которые выводят сообщение, следующим образом:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nСнова нажмите кнопку **Выполнить**, чтобы просмотреть результаты.\n\nВы уже использовали `+` для создания строк из **переменных** и **констант**. Но есть способ лучше.\nВы можете поместить переменную между символами `{` и `}`, чтобы код C# заменял этот текст значением переменной.\n\nЭтот подход называется [интерполяцией строк](../../language-reference/tokens/interpolated.md).\n\nЕсли добавить `$` перед открывающей кавычкой строки, то внутри строки можно включать переменные в фигурных скобках, например `aFriend`. Попробуйте!\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nСнова нажмите кнопку **Выполнить**, чтобы просмотреть результаты. Вместо \"Hello {aFriend}\" будет выведено сообщение \"Hello Maira\".\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Работа со строками
  durationInMinutes: 5
  content: >
    Когда вы вносили последние изменения, вы ознакомились с возможностями работы со строками. Рассмотрим их подробнее.


    Между фигурными скобками можно указать более одной переменной. Попробуйте выполнить следующий код:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Изучая работу со строками, вы быстро поймете, что это не просто наборы букв. Длину строки можно узнать с помощью `Length`. `Length` — это **свойство** строки, которое возвращает количество содержащихся в ней символов. Добавьте следующий код в нижней части интерактивного окна:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Теперь вы можете попрактиковаться самостоятельно. Вы узнали, что `Console.WriteLine()` выводит текст на экран. Вы научились объявлять переменные и объединять строки. Поэкспериментируйте с интерактивным окном. В этом окне есть интересная функция **IntelliSense**, которая предлагает доступные варианты действий. Введите `.` после `d` в `firstFriend`. Вы увидите список рекомендаций с доступными свойствами и методами.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Другие действия со строками
  durationInMinutes: 5
  content: "Вы уже использовали **метод** (<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>) для вывода сообщений. **Метод** — это блок кода, который реализует какое-либо действие. Ему присваивается имя, чтобы вы могли получить к нему доступ. \n\nПредположим, что строки содержат начальные или конечные пробелы, которые не нужно отображать. Вам нужно **обрезать** эти лишние пробелы.\nЭту задачу выполняют метод <xref:System.String.Trim%2A> и связанные с ним методы <xref:System.String.TrimStart%2A> и <xref:System.String.TrimEnd%2A>. Они просто удаляют из строки начальные и (или) конечные пробелы. Попробуйте выполнить код ниже:\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\nВ этом примере демонстрируются важные принципы работы со строками. Методы управления строками возвращают новые строковые объекты, а не вносят изменения в существующие. Как видите, каждый вызов любого из методов `Trim` возвращает новую строку, а не изменяет исходное сообщение.\n\nДоступны и другие методы для работы со строкой. Вы наверняка уже пользовались командами поиска и замены в текстовых редакторах. Метод <xref:System.String.Replace%2A> выполняет аналогичную задачу для строк. Он находит некоторую подстроку и заменяет ее другим текстом. Метод <xref:System.String.Replace%2A> принимает два **параметра**. Это строки в скобках. Первая строка — это текст для поиска. Вторая строка — это текст для замены. Попробуйте сами. Добавьте этот код: Введите его и наблюдайте подсказки, которые появятся при вводе `.Re` после переменной `sayHello`:\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\nДва других полезных метода преобразуют все буквы строки в прописные или строчные. Попробуйте следующий код: Введите его и наблюдайте, как **IntelliSense** предоставит подсказки при вводе `To`:\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Поиск по строкам
  durationInMinutes: 10
  content: "Другая функция операции *поиска и замены* — поиск текста в строке. Для поиска вы можете использовать метод <xref:System.String.Contains%2A>. Он покажет, содержит ли строка подстроку. Попробуйте выполнить код ниже, чтобы изучить <xref:System.String.Contains%2A>:\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\nМетод <xref:System.String.Contains%2A> возвращает **логическое** значение, которое указывает, найдена ли искомая строка. **Логическое** значение может принимать значение `true` или `false`. **Логические** значения будут более подробно рассмотрены на одном из следующих занятий.\n\n***Задача***\n\nСуществует два схожих метода (<xref:System.String.StartsWith%2A> и <xref:System.String.EndsWith%2A>) для поиска подстрок в строках. С их помощью выполняется поиск подстроки в начале или конце строки. Попробуйте изменить пример выше таким образом, чтобы вместо <xref:System.String.Contains%2A>использовались <xref:System.String.StartsWith%2A> и <xref:System.String.EndsWith%2A>. Выполните поиск слов You или goodbye в начале строки. Выполните поиск слов hello или goodbye в конце строки.\n\n> [!Note]\n> При проверке текста в конце строки учитывайте знаки пунктуации. Если строка оканчивается точкой, необходимо проверить строки, которые оканчиваются точкой.\n\nВы должны получить значение `true`, поставив слово \"You\" в начале, а слово \"hello\" — в конце, и значение false, поставив в начале или конце слово \"goodbye\". \n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Выполнение задачи
  durationInMinutes: 3
  content: >
    В результате получилось нечто подобное?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Вы ознакомились с учебником по основам C#.


    Дополнительные сведения о работе с типом `string` см. в разделе о [строках](../../programming-guide/strings/index.md) [руководства по программированию на C#](../../programming-guide/index.md).

    [Советы по использованию строк](../../how-to/index.md#working-with-strings)
