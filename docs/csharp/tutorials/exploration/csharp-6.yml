### YamlMime:Tutorial
title: <span data-ttu-id="9aab6-101">Изучите C# 6 — интерактивный учебник по C#</span><span class="sxs-lookup"><span data-stu-id="9aab6-101">Explore C# 6 - C# interactive C# tutorial</span></span>
metadata:
  title: Изучите C# 6 — испытайте новые возможности C# 6 в интерактивном режиме с помощью браузера
  description: В этом руководстве для интерактивного изучения C# 6 используется браузер. Изучите новые идиомы, которые можно использовать с C# 6; они делают код более кратким и удобочитаемым.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 0e76e18536bbf19d3c29e6bd78634956e5ec95c3
  ms.sourcegitcommit: d09c77414e9e4fc72c79b04deee7a756a120674e
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 01/08/2019
  ms.locfileid: "54085100"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="9aab6-105">Это руководство поможет в интерактивном изучении C# 6. С помощью браузера вы напишете код на C# и сможете просмотреть результаты его компиляции и выполнения.</span><span class="sxs-lookup"><span data-stu-id="9aab6-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="9aab6-106">Оно содержит ряд уроков, которые заменят более ранние рекомендации по C# на более новые и краткие возможности C# 6.</span><span class="sxs-lookup"><span data-stu-id="9aab6-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="9aab6-107">В оставшейся части этой статьи приведены общие сведения о каждой из этих функций со ссылкой для изучения каждого компонента.</span><span class="sxs-lookup"><span data-stu-id="9aab6-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="9aab6-108">Автосвойства только для чтения позволяют реализовать типы "только для чтения"</span><span class="sxs-lookup"><span data-stu-id="9aab6-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"9aab6-109\">Два расширения синтаксиса автосвойств позволяют упростить их использование в новых местах: это автосвойства только для чтения и инициализаторы автосвойств.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"9aab6-110\">Рассмотрим следующую небольшую программу:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"9aab6-111\">Запустите режим фокусировки и скопируйте приведенный выше код в интерактивное окно C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"9aab6-112\">Затем нажмите кнопку *Запуск*, чтобы увидеть, что делает код.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"9aab6-113\">`AllCaps` имеет нежелательный побочный эффект изменения значений свойств, а также возвращает строку в верхнем регистре.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"9aab6-114\">Автор класса `Person` хотел сделать строки `FirstName` и `LastName` доступными только для чтения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"9aab6-115\">С помощью C# 6 можно сделать это намерение явным.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"9aab6-116\">Удалите `private set` из обоих свойств, чтобы создать автосвойство только для чтения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"9aab6-117\">Нажмите кнопку *Запуск*, чтобы увидеть, что компилятор отметит два места, где свойства `FirstName` и `LastName` изменяются в том случае, когда это не требовалось.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"9aab6-118\">Вы можете заменить метод `AllCaps` на следующий код, чтобы устранить эту ошибку компилятора:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"9aab6-119\">При использовании этого нового синтаксиса компилятор гарантирует, что свойства являются неизменяемыми.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="9aab6-120">Инициализация резервных полей для автосвойств</span><span class="sxs-lookup"><span data-stu-id="9aab6-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"9aab6-121\">Новый синтаксис в C# 6 позволяет использовать инициализаторы для автосвойств.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"9aab6-122\">Это становится все более важно по мере появления новых возможностей классов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"9aab6-123\">Добавим свойство для отчества и новый конструктор, принимающий три строки для вашего класса `Person`:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"9aab6-124\">Присваивание свойству `MiddleName` — это инициализатор.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"9aab6-125\">Он инициализирует созданное компилятором резервное поле для отчества.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="9aab6-126">Элементы, воплощающие выражение</span><span class="sxs-lookup"><span data-stu-id="9aab6-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="9aab6-127">Элементы, воплощающие выражение, предоставляют упрощенный синтаксис для упрощенных методов.</span><span class="sxs-lookup"><span data-stu-id="9aab6-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="9aab6-128">В классе `Person` есть два оптимальных кандидата.</span><span class="sxs-lookup"><span data-stu-id="9aab6-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="9aab6-129">Посмотрите на объявление `ToString`:</span><span class="sxs-lookup"><span data-stu-id="9aab6-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="9aab6-130">Замените объявление `ToString` следующим кодом:</span><span class="sxs-lookup"><span data-stu-id="9aab6-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="9aab6-131">Повторите то же самое с методом `Caps`.</span><span class="sxs-lookup"><span data-stu-id="9aab6-131">Try the same with the `Caps` method.</span></span> <span data-ttu-id="9aab6-132">Это незначительное улучшение, но при рациональном использовании оно создает гораздо более удобочитаемый код, особенно для объектов передачи данных (DTO) и других типов с минимальными поведением.</span><span class="sxs-lookup"><span data-stu-id="9aab6-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="9aab6-133">Импорт одиночного класса</span><span class="sxs-lookup"><span data-stu-id="9aab6-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"9aab6-134\">Если постоянно использовать статические методы класса во всем коде, включение имени класса каждый раз искажает смысл кода.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-134\">If you repeatedly use a class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"9aab6-135\">Класс `Person` в настоящее время импортирует пространство имен `System` несмотря на то, что используется только <xref:System.Console?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"9aab6-136\">Измените оператор `using` следующим образом:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"9aab6-137\">Оператор `static using` лучше подходит для более крупных программ, активно использующих один класс со множеством статических методов, таких как класс [`string`](xref:System.String) или <xref:System.Math?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="9aab6-138">Улучшенный формат строк</span><span class="sxs-lookup"><span data-stu-id="9aab6-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"9aab6-139\">C# версии 6 содержит новый синтаксис для составления строк из строки и встроенных выражений, вычисление которых позволяет получить другие строковые значения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"9aab6-140\">Вы можете изменить методы `ToString` и `AllCaps`, используя следующий синтаксис:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"9aab6-141\">Вместо позиционных аргументов между `{` и `}` пишите выражения на C# напрямую.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"9aab6-142\">То же самое можно сделать и с методом `Main`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"9aab6-143\">Замените существующий код следующим кодом:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"9aab6-144\">В этих выражениях можно указать более одной переменной.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"9aab6-145\">Начнем с нового примера и изменим его, чтобы продемонстрировать другие выражения, которые можно использовать с интерполяцией строк.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"9aab6-146\">Вставьте приведенный ниже код в интерактивном окне в метод `Main`:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\n<span data-ttu-id=\"9aab6-147\">Можно удалить локальную переменную `average` и выполнить это вычисление как часть выражения интерполированной строки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-147\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"9aab6-148\">Замените две последние строки на следующее:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-148\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"9aab6-149\">Выполняя предыдущий пример, вы могли увидеть, что выходные данные для `Average` имеют больше десятичных разрядов, чем хотелось бы.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-149\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"9aab6-150\">Синтаксис интерполяции строк поддерживает все строки формата, доступные с помощью методов форматирования прежних версий.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-150\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"9aab6-151\">Строки формата заключаются в фигурные скобки.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-151\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"9aab6-152\">Добавьте `:`, за которым следует форматируемое выражение:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-152\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="9aab6-153">Быстрые и простые проверки значений NULL</span><span class="sxs-lookup"><span data-stu-id="9aab6-153">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"9aab6-154\">Оператор `?.` (условный оператор NULL) упрощает написание логики, которая опирается на значения `null`, без проблем и без дополнительной проверки `if`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-154\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"9aab6-155\">Чтобы изучить эту возможность, сначала скопируйте следующий код в интерактивном окне, чтобы попробовать:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-155\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"9aab6-156\">Он порождает <xref:System.NullReferenceException> при выполнении примера.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-156\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"9aab6-157\">Измените оператор доступа к члену `.` на **условный оператор NULL**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-157\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"9aab6-158\">После этого изменения выходные данные отсутствуют.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-158\">After this change, there's no output.</span></span> <span data-ttu-id=\"9aab6-159\">Причина в том, что результат `s?.Length` — `int?`, когда результат `s.Length` — `int`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-159\">That's because the result of `s?.Length` is a `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"9aab6-160\">В этом примере `s?.Length` — `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-160\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"9aab6-161\">`?.` возвращает `null`, если левый операнд является `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-161\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"9aab6-162\">Если тип правого операнда является типом значения, оператор `?.` возвращает обнуляемый тип для этого типа.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-162\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"9aab6-163\">В дополнение к `?.` можно использовать `?[]` для доступа к массиву или индексатору.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-163\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"9aab6-164\">Запустите этот код в интерактивном окне:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-164\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"9aab6-165\">Несколько условных операторов могут быть объединены в одном выражении.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-165\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"9aab6-166\">Левый операнд `null` возвращает результат `null`, что позволяет легко избежать вложения условных операторов для доступа к членам элементов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-166\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"9aab6-167\">Например, запустите этот код в интерактивном окне:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-167\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"9aab6-168\">Предыдущий пример можно упростить с помощью **оператора объединения NUL**, чтобы предоставлять значение по умолчанию:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-168\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"9aab6-169\">**Условный оператор NULL** помогает писать код, который упрощает вашу основную логику, в то же время прозрачно проверяя наличие значений `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-169\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="9aab6-170">Фильтры исключений</span><span class="sxs-lookup"><span data-stu-id="9aab6-170">Exception filers</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"9aab6-171\">Фильтры исключений позволяют перехватывать исключения на основе некоторых условий.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-171\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"9aab6-172\">Обычное использование — создание метода фильтра, который записывает исключения в журнал, но никогда не обрабатывает их.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-172\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"9aab6-173\">Фильтр исключений — это логическое выражение, которое равно `true`, когда предложение `catch` должно быть выполнено, и `false`, когда исключение не должно перехватываться предложением `catch`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-173\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"9aab6-174\">Запустите этот код в интерактивном окне: Он выводит тип исключения и сообщение на консоль.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-174\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"9aab6-175\">Он возвращает значение false, что означает, что исключение не может быть обработано.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-175\">It returns false which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"9aab6-176\">Выполните программу в интерактивном окне.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-176\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"9aab6-177\">Вы должны увидеть сообщение из метода `LogException`, за которым следует сообщение об исключении по умолчанию.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-177\">You should sen the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"9aab6-178\">Поставим эксперимент и изменим оператор `return false` на `return true`, а затем выполним это снова.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-178\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"9aab6-179\">Теперь исключение перехватывается и программа выполняется до завершения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-179\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"9aab6-180\">За пределами сценариев ведения журнала фильтры исключений могут быть наиболее полезны, когда свойство исключения определяет, какое действие следует предпринять.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-180\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"9aab6-181\">Например, можно заглянуть внутрь <xref:System.AggregateException>, чтобы узнать, какие в него вложены исключения, и принять соответствующие меры в зависимости от конкретного исключения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-181\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="9aab6-182">Использование nameof</span><span class="sxs-lookup"><span data-stu-id="9aab6-182">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"9aab6-183\">Оператор `nameof` возвращает имя переменной или типа.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-183\">The `nameof` operator returns the name of any variable or type.</span></span> <span data-ttu-id=\"9aab6-184\">Запустите следующий код в интерактивном окне и посмотрите на результат:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-184\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"9aab6-185\">Вывод содержит имя переменной или типа.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-185\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"9aab6-186\">Даже если указано полное имя типа (например, `System.String`), оператор `nameof` возвращает неполное имя.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-186\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"9aab6-187\">Эта функция особенно полезна, когда необходимо преобразовать в строку имя параметра или свойства.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-187\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"9aab6-188\">Примеры включают запись имени аргумента для генерации <xref:System.ArgumentNullException> или <xref:System.ArgumentException> либо запись имени измененного свойства при реализации <xref:System.ComponentModel.INotifyPropertyChanged>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-188\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="9aab6-189">Новый синтаксис инициализации объектов</span><span class="sxs-lookup"><span data-stu-id="9aab6-189">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"9aab6-190\">Инициализация нового объекта позволяет создавать методы, которые упрощают процесс инициализации словарей и других типов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-190\">New object initialization enables you to create methods that make it easier to initialize dictionaries, and other types.</span></span> <span data-ttu-id=\"9aab6-191\">Начнем со словаря.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-191\">Start with a dictionary.</span></span> <span data-ttu-id=\"9aab6-192\">Запустите приведенный ниже код в интерактивном окне.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-192\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"9aab6-193\">Вы можете расширить этот синтаксис на любой класс, реализующий <xref:System.Collections.IEnumerable> и имеющий общедоступный метод `Add`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-193\">You can extend this syntax to any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span>  <span data-ttu-id=\"9aab6-194\">Запустите следующий пример в интерактивном окне.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-194\">Try the following sample in the interactive window.</span></span> <span data-ttu-id=\"9aab6-195\">Он создает класс `Path`, реализующий `IEnumerable<Point3D>` и имеющий метод для добавления точек, принимающий три аргумента.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-195\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that takes three arguments.</span></span> <span data-ttu-id=\"9aab6-196\">Он также сочетает в себе другие техники, уже показанные в этом учебнике, такие как члены, воплощающие выражение, и интерполяция строк.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-196\">It also combines other techniques already demonstrated in this tutorial, such as expression-bodied members and string interpolation.</span></span> \n\n<span data-ttu-id=\"9aab6-197\">В методе `Main` вы инициализируете путь, указав координаты для точек.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-197\">In the `Main` method, you initialize a path by providing coordinates for the points.</span></span> <span data-ttu-id=\"9aab6-198\">Эти точки добавляются к коллекции при помощи метода `Add`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-198\">Those points are added to the collection through the `Add` method.</span></span>\n\n<span data-ttu-id=\"9aab6-199\">Метод Add также может быть методом расширения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-199\">The Add method can also be an extension method.</span></span> <span data-ttu-id=\"9aab6-200\">Вы можете изменить пример выше следующим образом.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-200\">You could update the preceding sample as follows.</span></span> <span data-ttu-id=\"9aab6-201\">Такой пример не будет компилироваться в интерактивном окне из-за ограничений \"песочницы\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-201\">This sample won't compile in the interactive experience because of sandbox limitations.</span></span> <span data-ttu-id=\"9aab6-202\">Вы можете попробовать его на своем компьютере.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9aab6-202\">You can try it on your own machine.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="9aab6-203">Мы завершили подробное описание новых функций в C# 6.</span><span class="sxs-lookup"><span data-stu-id="9aab6-203">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="9aab6-204">Теперь попробуйте их самостоятельно в ваших приложениях.</span><span class="sxs-lookup"><span data-stu-id="9aab6-204">Now try them yourself in your applications.</span></span>
